/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
  CreatePrivateKey201,
  CreatePrivateKeyBodies,
  DeletePrivateKeyByUuid200,
  DeletePrivateKeyByUuid422,
  NHttp400Response,
  NHttp401Response,
  PrivateKeyDTO,
  UpdatePrivateKey201,
  UpdatePrivateKeyBodies,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List all private keys.
 * @summary List
 */
export type listPrivateKeysResponse200 = {
  data: PrivateKeyDTO[];
  status: 200;
};

export type listPrivateKeysResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listPrivateKeysResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listPrivateKeysResponseSuccess = listPrivateKeysResponse200 & {
  headers: Headers;
};
export type listPrivateKeysResponseError = (
  | listPrivateKeysResponse400
  | listPrivateKeysResponse401
) & {
  headers: Headers;
};

export type listPrivateKeysResponse =
  | listPrivateKeysResponseSuccess
  | listPrivateKeysResponseError;

export const getListPrivateKeysUrl = () => {
  return `https://coolify.tsar-bmb.org/security/keys`;
};

export const listPrivateKeys = async (
  options?: RequestInit,
): Promise<listPrivateKeysResponse> => {
  const res = await fetch(getListPrivateKeysUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listPrivateKeysResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listPrivateKeysResponse;
};

export const getListPrivateKeysQueryKey = () => {
  return [`https://coolify.tsar-bmb.org/security/keys`] as const;
};

export const getListPrivateKeysQueryOptions = <
  TData = Awaited<ReturnType<typeof listPrivateKeys>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPrivateKeys>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPrivateKeysQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrivateKeys>>> = ({
    signal,
  }) => listPrivateKeys({ signal, ...fetchOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPrivateKeys>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListPrivateKeysQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPrivateKeys>>
>;
export type ListPrivateKeysQueryError = NHttp400Response | NHttp401Response;

export function useListPrivateKeys<
  TData = Awaited<ReturnType<typeof listPrivateKeys>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrivateKeys>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrivateKeys>>,
          TError,
          Awaited<ReturnType<typeof listPrivateKeys>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListPrivateKeys<
  TData = Awaited<ReturnType<typeof listPrivateKeys>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrivateKeys>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrivateKeys>>,
          TError,
          Awaited<ReturnType<typeof listPrivateKeys>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListPrivateKeys<
  TData = Awaited<ReturnType<typeof listPrivateKeys>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrivateKeys>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListPrivateKeys<
  TData = Awaited<ReturnType<typeof listPrivateKeys>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrivateKeys>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListPrivateKeysQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new private key.
 * @summary Create
 */
export type createPrivateKeyResponse201 = {
  data: CreatePrivateKey201;
  status: 201;
};

export type createPrivateKeyResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createPrivateKeyResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createPrivateKeyResponseSuccess = createPrivateKeyResponse201 & {
  headers: Headers;
};
export type createPrivateKeyResponseError = (
  | createPrivateKeyResponse400
  | createPrivateKeyResponse401
) & {
  headers: Headers;
};

export type createPrivateKeyResponse =
  | createPrivateKeyResponseSuccess
  | createPrivateKeyResponseError;

export const getCreatePrivateKeyUrl = () => {
  return `https://coolify.tsar-bmb.org/security/keys`;
};

export const createPrivateKey = async (
  createPrivateKeyBodies: CreatePrivateKeyBodies,
  options?: RequestInit,
): Promise<createPrivateKeyResponse> => {
  const res = await fetch(getCreatePrivateKeyUrl(), {
    ...options,
    body: JSON.stringify(createPrivateKeyBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createPrivateKeyResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createPrivateKeyResponse;
};

export const getCreatePrivateKeyMutationOptions = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPrivateKey>>,
    TError,
    { data: CreatePrivateKeyBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPrivateKey>>,
  TError,
  { data: CreatePrivateKeyBodies },
  TContext
> => {
  const mutationKey = ["createPrivateKey"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPrivateKey>>,
    { data: CreatePrivateKeyBodies }
  > = (props) => {
    const { data } = props ?? {};

    return createPrivateKey(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePrivateKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPrivateKey>>
>;
export type CreatePrivateKeyMutationBody = CreatePrivateKeyBodies;
export type CreatePrivateKeyMutationError = NHttp400Response | NHttp401Response;

/**
 * @summary Create
 */
export const useCreatePrivateKey = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPrivateKey>>,
      TError,
      { data: CreatePrivateKeyBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPrivateKey>>,
  TError,
  { data: CreatePrivateKeyBodies },
  TContext
> => {
  const mutationOptions = getCreatePrivateKeyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update a private key.
 * @summary Update
 */
export type updatePrivateKeyResponse201 = {
  data: UpdatePrivateKey201;
  status: 201;
};

export type updatePrivateKeyResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updatePrivateKeyResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updatePrivateKeyResponseSuccess = updatePrivateKeyResponse201 & {
  headers: Headers;
};
export type updatePrivateKeyResponseError = (
  | updatePrivateKeyResponse400
  | updatePrivateKeyResponse401
) & {
  headers: Headers;
};

export type updatePrivateKeyResponse =
  | updatePrivateKeyResponseSuccess
  | updatePrivateKeyResponseError;

export const getUpdatePrivateKeyUrl = () => {
  return `https://coolify.tsar-bmb.org/security/keys`;
};

export const updatePrivateKey = async (
  updatePrivateKeyBodies: UpdatePrivateKeyBodies,
  options?: RequestInit,
): Promise<updatePrivateKeyResponse> => {
  const res = await fetch(getUpdatePrivateKeyUrl(), {
    ...options,
    body: JSON.stringify(updatePrivateKeyBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updatePrivateKeyResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updatePrivateKeyResponse;
};

export const getUpdatePrivateKeyMutationOptions = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePrivateKey>>,
    TError,
    { data: UpdatePrivateKeyBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePrivateKey>>,
  TError,
  { data: UpdatePrivateKeyBodies },
  TContext
> => {
  const mutationKey = ["updatePrivateKey"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePrivateKey>>,
    { data: UpdatePrivateKeyBodies }
  > = (props) => {
    const { data } = props ?? {};

    return updatePrivateKey(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePrivateKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePrivateKey>>
>;
export type UpdatePrivateKeyMutationBody = UpdatePrivateKeyBodies;
export type UpdatePrivateKeyMutationError = NHttp400Response | NHttp401Response;

/**
 * @summary Update
 */
export const useUpdatePrivateKey = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePrivateKey>>,
      TError,
      { data: UpdatePrivateKeyBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePrivateKey>>,
  TError,
  { data: UpdatePrivateKeyBodies },
  TContext
> => {
  const mutationOptions = getUpdatePrivateKeyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get key by UUID.
 * @summary Get
 */
export type getPrivateKeyByUuidResponse200 = {
  data: PrivateKeyDTO;
  status: 200;
};

export type getPrivateKeyByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getPrivateKeyByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getPrivateKeyByUuidResponse404 = {
  data: void;
  status: 404;
};

export type getPrivateKeyByUuidResponseSuccess =
  getPrivateKeyByUuidResponse200 & {
    headers: Headers;
  };
export type getPrivateKeyByUuidResponseError = (
  | getPrivateKeyByUuidResponse400
  | getPrivateKeyByUuidResponse401
  | getPrivateKeyByUuidResponse404
) & {
  headers: Headers;
};

export type getPrivateKeyByUuidResponse =
  | getPrivateKeyByUuidResponseSuccess
  | getPrivateKeyByUuidResponseError;

export const getGetPrivateKeyByUuidUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/security/keys/${uuid}`;
};

export const getPrivateKeyByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getPrivateKeyByUuidResponse> => {
  const res = await fetch(getGetPrivateKeyByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getPrivateKeyByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getPrivateKeyByUuidResponse;
};

export const getGetPrivateKeyByUuidQueryKey = (uuid?: string) => {
  return [`https://coolify.tsar-bmb.org/security/keys/${uuid}`] as const;
};

export const getGetPrivateKeyByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPrivateKeyByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPrivateKeyByUuid>>
  > = ({ signal }) => getPrivateKeyByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPrivateKeyByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPrivateKeyByUuid>>
>;
export type GetPrivateKeyByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | void;

export function useGetPrivateKeyByUuid<
  TData = Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
          TError,
          Awaited<ReturnType<typeof getPrivateKeyByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPrivateKeyByUuid<
  TData = Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
          TError,
          Awaited<ReturnType<typeof getPrivateKeyByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPrivateKeyByUuid<
  TData = Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetPrivateKeyByUuid<
  TData = Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPrivateKeyByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPrivateKeyByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a private key.
 * @summary Delete
 */
export type deletePrivateKeyByUuidResponse200 = {
  data: DeletePrivateKeyByUuid200;
  status: 200;
};

export type deletePrivateKeyByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deletePrivateKeyByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deletePrivateKeyByUuidResponse404 = {
  data: void;
  status: 404;
};

export type deletePrivateKeyByUuidResponse422 = {
  data: DeletePrivateKeyByUuid422;
  status: 422;
};

export type deletePrivateKeyByUuidResponseSuccess =
  deletePrivateKeyByUuidResponse200 & {
    headers: Headers;
  };
export type deletePrivateKeyByUuidResponseError = (
  | deletePrivateKeyByUuidResponse400
  | deletePrivateKeyByUuidResponse401
  | deletePrivateKeyByUuidResponse404
  | deletePrivateKeyByUuidResponse422
) & {
  headers: Headers;
};

export type deletePrivateKeyByUuidResponse =
  | deletePrivateKeyByUuidResponseSuccess
  | deletePrivateKeyByUuidResponseError;

export const getDeletePrivateKeyByUuidUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/security/keys/${uuid}`;
};

export const deletePrivateKeyByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<deletePrivateKeyByUuidResponse> => {
  const res = await fetch(getDeletePrivateKeyByUuidUrl(uuid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deletePrivateKeyByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deletePrivateKeyByUuidResponse;
};

export const getDeletePrivateKeyByUuidMutationOptions = <
  TError =
    | NHttp400Response
    | NHttp401Response
    | void
    | DeletePrivateKeyByUuid422,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePrivateKeyByUuid>>,
    TError,
    { uuid: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePrivateKeyByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationKey = ["deletePrivateKeyByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePrivateKeyByUuid>>,
    { uuid: string }
  > = (props) => {
    const { uuid } = props ?? {};

    return deletePrivateKeyByUuid(uuid, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePrivateKeyByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePrivateKeyByUuid>>
>;

export type DeletePrivateKeyByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | void
  | DeletePrivateKeyByUuid422;

/**
 * @summary Delete
 */
export const useDeletePrivateKeyByUuid = <
  TError =
    | NHttp400Response
    | NHttp401Response
    | void
    | DeletePrivateKeyByUuid422,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePrivateKeyByUuid>>,
      TError,
      { uuid: string },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePrivateKeyByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationOptions = getDeletePrivateKeyByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
