/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  CreatePrivateKey201,
  DeletePrivateKeyByUuid200,
  PrivateKeyDTO,
  UpdatePrivateKey201,
} from ".././model";

export const getListPrivateKeysResponseMock = (): PrivateKeyDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    fingerprint: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    is_git_related: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    private_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    public_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    team_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getCreatePrivateKeyResponseMock = (
  overrideResponse: Partial<CreatePrivateKey201> = {},
): CreatePrivateKey201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdatePrivateKeyResponseMock = (
  overrideResponse: Partial<UpdatePrivateKey201> = {},
): UpdatePrivateKey201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetPrivateKeyByUuidResponseMock = (
  overrideResponse: Partial<PrivateKeyDTO> = {},
): PrivateKeyDTO => ({
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  fingerprint: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  is_git_related: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  private_key: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  public_key: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  team_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeletePrivateKeyByUuidResponseMock = (
  overrideResponse: Partial<DeletePrivateKeyByUuid200> = {},
): DeletePrivateKeyByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListPrivateKeysMockHandler = (
  overrideResponse?:
    | PrivateKeyDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PrivateKeyDTO[]> | PrivateKeyDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/security/keys",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListPrivateKeysResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreatePrivateKeyMockHandler = (
  overrideResponse?:
    | CreatePrivateKey201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreatePrivateKey201> | CreatePrivateKey201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/security/keys",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreatePrivateKeyResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getUpdatePrivateKeyMockHandler = (
  overrideResponse?:
    | UpdatePrivateKey201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdatePrivateKey201> | UpdatePrivateKey201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/security/keys",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdatePrivateKeyResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetPrivateKeyByUuidMockHandler = (
  overrideResponse?:
    | PrivateKeyDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PrivateKeyDTO> | PrivateKeyDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/security/keys/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPrivateKeyByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeletePrivateKeyByUuidMockHandler = (
  overrideResponse?:
    | DeletePrivateKeyByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeletePrivateKeyByUuid200> | DeletePrivateKeyByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/security/keys/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeletePrivateKeyByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getPrivateKeysMock = () => [
  getListPrivateKeysMockHandler(),
  getCreatePrivateKeyMockHandler(),
  getUpdatePrivateKeyMockHandler(),
  getGetPrivateKeyByUuidMockHandler(),
  getDeletePrivateKeyByUuidMockHandler(),
];
