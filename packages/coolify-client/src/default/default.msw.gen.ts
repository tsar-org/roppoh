/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type { DisableApi200, EnableApi200 } from ".././model";

export const getVersionResponseMock = (): string => faker.word.sample();

export const getEnableApiResponseMock = (
  overrideResponse: Partial<EnableApi200> = {},
): EnableApi200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDisableApiResponseMock = (
  overrideResponse: Partial<DisableApi200> = {},
): DisableApi200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getHealthcheckResponseMock = (): string => faker.word.sample();

export const getVersionMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/version",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getVersionResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getEnableApiMockHandler = (
  overrideResponse?:
    | EnableApi200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EnableApi200> | EnableApi200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/enable",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getEnableApiResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDisableApiMockHandler = (
  overrideResponse?:
    | DisableApi200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DisableApi200> | DisableApi200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/disable",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDisableApiResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getHealthcheckMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/health",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getHealthcheckResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getDefaultMock = () => [
  getVersionMockHandler(),
  getEnableApiMockHandler(),
  getDisableApiMockHandler(),
  getHealthcheckMockHandler(),
];
