/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";

import type {
  CreateServer201,
  CreateServerBodies,
  DeleteServerByUuid200,
  GetDomainsByServerUuid200Schema,
  GetResourcesByServerUuid200Schema,
  NHttp400Response,
  NHttp401Response,
  NHttp404Response,
  ServerDTO,
  UpdateServerByUuidBodies,
  ValidateServerByUuid201,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List all servers.
 * @summary List
 */
export type listServersResponse200 = {
  data: ServerDTO[];
  status: 200;
};

export type listServersResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listServersResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listServersResponseSuccess = listServersResponse200 & {
  headers: Headers;
};
export type listServersResponseError = (
  | listServersResponse400
  | listServersResponse401
) & {
  headers: Headers;
};

export type listServersResponse =
  | listServersResponseSuccess
  | listServersResponseError;

export const getListServersUrl = () => {
  return `/api/coolify/servers`;
};

export const listServers = async (
  options?: RequestInit,
): Promise<listServersResponse> => {
  const res = await fetch(getListServersUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listServersResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listServersResponse;
};

export const getListServersQueryKey = () => {
  return [`/api/coolify/servers`] as const;
};

export const getListServersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listServers>>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof listServers>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServers>>> = ({
    signal,
  }) => listServers({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listServers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServers>>
>;
export type ListServersInfiniteQueryError = NHttp400Response | NHttp401Response;

export function useListServersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServers>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServers>>,
          TError,
          Awaited<ReturnType<typeof listServers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServers>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServers>>,
          TError,
          Awaited<ReturnType<typeof listServers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServers>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServers>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServersInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListServersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListServersInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListServersQueryOptions = <
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServers>>> = ({
    signal,
  }) => listServers({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listServers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServers>>
>;
export type ListServersQueryError = NHttp400Response | NHttp401Response;

export function useListServers<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServers>>,
          TError,
          Awaited<ReturnType<typeof listServers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServers<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServers>>,
          TError,
          Awaited<ReturnType<typeof listServers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServers<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServers<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListServersQuery = async <
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServers>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListServersQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListServersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof listServers>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServers>>> = ({
    signal,
  }) => listServers({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listServers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServers>>
>;
export type ListServersSuspenseQueryError = NHttp400Response | NHttp401Response;

export function useListServersSuspense<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServersSuspense<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServersSuspense<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServersSuspense<
  TData = Awaited<ReturnType<typeof listServers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServersSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create Server.
 * @summary Create
 */
export type createServerResponse201 = {
  data: CreateServer201;
  status: 201;
};

export type createServerResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createServerResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createServerResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type createServerResponseSuccess = createServerResponse201 & {
  headers: Headers;
};
export type createServerResponseError = (
  | createServerResponse400
  | createServerResponse401
  | createServerResponse404
) & {
  headers: Headers;
};

export type createServerResponse =
  | createServerResponseSuccess
  | createServerResponseError;

export const getCreateServerUrl = () => {
  return `/api/coolify/servers`;
};

export const createServer = async (
  createServerBodies: CreateServerBodies,
  options?: RequestInit,
): Promise<createServerResponse> => {
  const res = await fetch(getCreateServerUrl(), {
    ...options,
    body: JSON.stringify(createServerBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createServerResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createServerResponse;
};

export const getCreateServerMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createServer>>,
    TError,
    { data: CreateServerBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createServer>>,
  TError,
  { data: CreateServerBodies },
  TContext
> => {
  const mutationKey = ["createServer"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createServer>>,
    { data: CreateServerBodies }
  > = (props) => {
    const { data } = props ?? {};

    return createServer(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateServerMutationResult = NonNullable<
  Awaited<ReturnType<typeof createServer>>
>;
export type CreateServerMutationBody = CreateServerBodies;
export type CreateServerMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Create
 */
export const useCreateServer = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createServer>>,
      TError,
      { data: CreateServerBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createServer>>,
  TError,
  { data: CreateServerBodies },
  TContext
> => {
  const mutationOptions = getCreateServerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get server by UUID.
 * @summary Get
 */
export type getServerByUuidResponse200 = {
  data: ServerDTO;
  status: 200;
};

export type getServerByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getServerByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getServerByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getServerByUuidResponseSuccess = getServerByUuidResponse200 & {
  headers: Headers;
};
export type getServerByUuidResponseError = (
  | getServerByUuidResponse400
  | getServerByUuidResponse401
  | getServerByUuidResponse404
) & {
  headers: Headers;
};

export type getServerByUuidResponse =
  | getServerByUuidResponseSuccess
  | getServerByUuidResponseError;

export const getGetServerByUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}`;
};

export const getServerByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getServerByUuidResponse> => {
  const res = await fetch(getGetServerByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getServerByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getServerByUuidResponse;
};

export const getGetServerByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/servers/${uuid}`] as const;
};

export const getGetServerByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getServerByUuid>>> = ({
    signal,
  }) => getServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServerByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServerByUuid>>
>;
export type GetServerByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServerByUuidInfiniteQueryOptions(uuid, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetServerByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetServerByUuidInfiniteQueryOptions(uuid, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetServerByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getServerByUuid>>> = ({
    signal,
  }) => getServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServerByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServerByUuid>>
>;
export type GetServerByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServerByUuid<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuid<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuid<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServerByUuid<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServerByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetServerByUuidQuery = async <
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetServerByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetServerByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getServerByUuid>>> = ({
    signal,
  }) => getServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServerByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServerByUuid>>
>;
export type GetServerByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServerByUuidSuspenseQueryOptions(uuid, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete server by UUID.
 * @summary Delete
 */
export type deleteServerByUuidResponse200 = {
  data: DeleteServerByUuid200;
  status: 200;
};

export type deleteServerByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deleteServerByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deleteServerByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type deleteServerByUuidResponseSuccess =
  deleteServerByUuidResponse200 & {
    headers: Headers;
  };
export type deleteServerByUuidResponseError = (
  | deleteServerByUuidResponse400
  | deleteServerByUuidResponse401
  | deleteServerByUuidResponse404
) & {
  headers: Headers;
};

export type deleteServerByUuidResponse =
  | deleteServerByUuidResponseSuccess
  | deleteServerByUuidResponseError;

export const getDeleteServerByUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}`;
};

export const deleteServerByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<deleteServerByUuidResponse> => {
  const res = await fetch(getDeleteServerByUuidUrl(uuid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deleteServerByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deleteServerByUuidResponse;
};

export const getDeleteServerByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteServerByUuid>>,
    TError,
    { uuid: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteServerByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationKey = ["deleteServerByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteServerByUuid>>,
    { uuid: string }
  > = (props) => {
    const { uuid } = props ?? {};

    return deleteServerByUuid(uuid, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteServerByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteServerByUuid>>
>;

export type DeleteServerByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Delete
 */
export const useDeleteServerByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteServerByUuid>>,
      TError,
      { uuid: string },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteServerByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationOptions = getDeleteServerByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update Server.
 * @summary Update
 */
export type updateServerByUuidResponse201 = {
  data: ServerDTO;
  status: 201;
};

export type updateServerByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updateServerByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updateServerByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type updateServerByUuidResponseSuccess =
  updateServerByUuidResponse201 & {
    headers: Headers;
  };
export type updateServerByUuidResponseError = (
  | updateServerByUuidResponse400
  | updateServerByUuidResponse401
  | updateServerByUuidResponse404
) & {
  headers: Headers;
};

export type updateServerByUuidResponse =
  | updateServerByUuidResponseSuccess
  | updateServerByUuidResponseError;

export const getUpdateServerByUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}`;
};

export const updateServerByUuid = async (
  uuid: string,
  updateServerByUuidBodies: UpdateServerByUuidBodies,
  options?: RequestInit,
): Promise<updateServerByUuidResponse> => {
  const res = await fetch(getUpdateServerByUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(updateServerByUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updateServerByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updateServerByUuidResponse;
};

export const getUpdateServerByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServerByUuid>>,
    TError,
    { uuid: string; data: UpdateServerByUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateServerByUuid>>,
  TError,
  { uuid: string; data: UpdateServerByUuidBodies },
  TContext
> => {
  const mutationKey = ["updateServerByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateServerByUuid>>,
    { uuid: string; data: UpdateServerByUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return updateServerByUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateServerByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateServerByUuid>>
>;
export type UpdateServerByUuidMutationBody = UpdateServerByUuidBodies;
export type UpdateServerByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Update
 */
export const useUpdateServerByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateServerByUuid>>,
      TError,
      { uuid: string; data: UpdateServerByUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateServerByUuid>>,
  TError,
  { uuid: string; data: UpdateServerByUuidBodies },
  TContext
> => {
  const mutationOptions = getUpdateServerByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get resources by server.
 * @summary Resources
 */
export type getResourcesByServerUuidResponse200 = {
  data: GetResourcesByServerUuid200Schema[];
  status: 200;
};

export type getResourcesByServerUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getResourcesByServerUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getResourcesByServerUuidResponseSuccess =
  getResourcesByServerUuidResponse200 & {
    headers: Headers;
  };
export type getResourcesByServerUuidResponseError = (
  | getResourcesByServerUuidResponse400
  | getResourcesByServerUuidResponse401
) & {
  headers: Headers;
};

export type getResourcesByServerUuidResponse =
  | getResourcesByServerUuidResponseSuccess
  | getResourcesByServerUuidResponseError;

export const getGetResourcesByServerUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}/resources`;
};

export const getResourcesByServerUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getResourcesByServerUuidResponse> => {
  const res = await fetch(getGetResourcesByServerUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getResourcesByServerUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getResourcesByServerUuidResponse;
};

export const getGetResourcesByServerUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/servers/${uuid}/resources`] as const;
};

export const getGetResourcesByServerUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getResourcesByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetResourcesByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>
  > = ({ signal }) =>
    getResourcesByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetResourcesByServerUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getResourcesByServerUuid>>
>;
export type GetResourcesByServerUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetResourcesByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getResourcesByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getResourcesByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getResourcesByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getResourcesByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getResourcesByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Resources
 */

export function useGetResourcesByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getResourcesByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetResourcesByServerUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Resources
 */
export const prefetchGetResourcesByServerUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetResourcesByServerUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetResourcesByServerUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetResourcesByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>
  > = ({ signal }) =>
    getResourcesByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetResourcesByServerUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getResourcesByServerUuid>>
>;
export type GetResourcesByServerUuidQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetResourcesByServerUuid<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getResourcesByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuid<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourcesByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getResourcesByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuid<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Resources
 */

export function useGetResourcesByServerUuid<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetResourcesByServerUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Resources
 */
export const prefetchGetResourcesByServerUuidQuery = async <
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetResourcesByServerUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetResourcesByServerUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetResourcesByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>
  > = ({ signal }) =>
    getResourcesByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getResourcesByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetResourcesByServerUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getResourcesByServerUuid>>
>;
export type GetResourcesByServerUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetResourcesByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetResourcesByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Resources
 */

export function useGetResourcesByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getResourcesByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getResourcesByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetResourcesByServerUuidSuspenseQueryOptions(
    uuid,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get domains by server.
 * @summary Domains
 */
export type getDomainsByServerUuidResponse200 = {
  data: GetDomainsByServerUuid200Schema[];
  status: 200;
};

export type getDomainsByServerUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getDomainsByServerUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getDomainsByServerUuidResponseSuccess =
  getDomainsByServerUuidResponse200 & {
    headers: Headers;
  };
export type getDomainsByServerUuidResponseError = (
  | getDomainsByServerUuidResponse400
  | getDomainsByServerUuidResponse401
) & {
  headers: Headers;
};

export type getDomainsByServerUuidResponse =
  | getDomainsByServerUuidResponseSuccess
  | getDomainsByServerUuidResponseError;

export const getGetDomainsByServerUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}/domains`;
};

export const getDomainsByServerUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getDomainsByServerUuidResponse> => {
  const res = await fetch(getGetDomainsByServerUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getDomainsByServerUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getDomainsByServerUuidResponse;
};

export const getGetDomainsByServerUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/servers/${uuid}/domains`] as const;
};

export const getGetDomainsByServerUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDomainsByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDomainsByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>
  > = ({ signal }) => getDomainsByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDomainsByServerUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDomainsByServerUuid>>
>;
export type GetDomainsByServerUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetDomainsByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDomainsByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDomainsByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getDomainsByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDomainsByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDomainsByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getDomainsByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDomainsByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Domains
 */

export function useGetDomainsByServerUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDomainsByServerUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDomainsByServerUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Domains
 */
export const prefetchGetDomainsByServerUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetDomainsByServerUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetDomainsByServerUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDomainsByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>
  > = ({ signal }) => getDomainsByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDomainsByServerUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDomainsByServerUuid>>
>;
export type GetDomainsByServerUuidQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetDomainsByServerUuid<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDomainsByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getDomainsByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuid<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDomainsByServerUuid>>,
          TError,
          Awaited<ReturnType<typeof getDomainsByServerUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuid<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Domains
 */

export function useGetDomainsByServerUuid<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDomainsByServerUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Domains
 */
export const prefetchGetDomainsByServerUuidQuery = async <
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetDomainsByServerUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetDomainsByServerUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDomainsByServerUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>
  > = ({ signal }) => getDomainsByServerUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getDomainsByServerUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDomainsByServerUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDomainsByServerUuid>>
>;
export type GetDomainsByServerUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetDomainsByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomainsByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Domains
 */

export function useGetDomainsByServerUuidSuspense<
  TData = Awaited<ReturnType<typeof getDomainsByServerUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDomainsByServerUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDomainsByServerUuidSuspenseQueryOptions(
    uuid,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Validate server by UUID.
 * @summary Validate
 */
export type validateServerByUuidResponse201 = {
  data: ValidateServerByUuid201;
  status: 201;
};

export type validateServerByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type validateServerByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type validateServerByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type validateServerByUuidResponseSuccess =
  validateServerByUuidResponse201 & {
    headers: Headers;
  };
export type validateServerByUuidResponseError = (
  | validateServerByUuidResponse400
  | validateServerByUuidResponse401
  | validateServerByUuidResponse404
) & {
  headers: Headers;
};

export type validateServerByUuidResponse =
  | validateServerByUuidResponseSuccess
  | validateServerByUuidResponseError;

export const getValidateServerByUuidUrl = (uuid: string) => {
  return `/api/coolify/servers/${uuid}/validate`;
};

export const validateServerByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<validateServerByUuidResponse> => {
  const res = await fetch(getValidateServerByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: validateServerByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as validateServerByUuidResponse;
};

export const getValidateServerByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/servers/${uuid}/validate`] as const;
};

export const getValidateServerByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof validateServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getValidateServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof validateServerByUuid>>
  > = ({ signal }) => validateServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof validateServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ValidateServerByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof validateServerByUuid>>
>;
export type ValidateServerByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useValidateServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof validateServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof validateServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof validateServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof validateServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof validateServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Validate
 */

export function useValidateServerByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof validateServerByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getValidateServerByUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Validate
 */
export const prefetchValidateServerByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getValidateServerByUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getValidateServerByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getValidateServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof validateServerByUuid>>
  > = ({ signal }) => validateServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof validateServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ValidateServerByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof validateServerByUuid>>
>;
export type ValidateServerByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useValidateServerByUuid<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof validateServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuid<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateServerByUuid>>,
          TError,
          Awaited<ReturnType<typeof validateServerByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuid<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Validate
 */

export function useValidateServerByUuid<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getValidateServerByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Validate
 */
export const prefetchValidateServerByUuidQuery = async <
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getValidateServerByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getValidateServerByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getValidateServerByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof validateServerByUuid>>
  > = ({ signal }) => validateServerByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof validateServerByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ValidateServerByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof validateServerByUuid>>
>;
export type ValidateServerByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useValidateServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useValidateServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Validate
 */

export function useValidateServerByUuidSuspense<
  TData = Awaited<ReturnType<typeof validateServerByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof validateServerByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getValidateServerByUuidSuspenseQueryOptions(
    uuid,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
