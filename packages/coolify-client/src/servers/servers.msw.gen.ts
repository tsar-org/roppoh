/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  CreateServer201,
  DeleteServerByUuid200,
  GetDomainsByServerUuid200Schema,
  GetResourcesByServerUuid200Schema,
  ServerDTO,
  ValidateServerByUuid201,
} from ".././model";

export const getListServersResponseMock = (): ServerDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    high_disk_usage_notification_sent: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    ip: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    log_drain_notification_sent: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    port: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    proxy: faker.helpers.arrayElement([{}, undefined]),
    proxy_type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["traefik", "caddy", "none"] as const),
      undefined,
    ]),
    settings: faker.helpers.arrayElement([
      {
        concurrent_builds: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        created_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        delete_unused_networks: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        delete_unused_volumes: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        docker_cleanup_frequency: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        docker_cleanup_threshold: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        dynamic_timeout: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        force_disabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        force_server_cleanup: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        id: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        is_build_server: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_cloudflare_tunnel: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_jump_server: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_logdrain_axiom_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_logdrain_custom_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_logdrain_highlight_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_logdrain_newrelic_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_metrics_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_reachable: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_sentinel_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_swarm_manager: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_swarm_worker: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_terminal_enabled: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_usable: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        logdrain_axiom_api_key: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_axiom_dataset_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_custom_config: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_custom_config_parser: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_highlight_project_id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_newrelic_base_uri: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        logdrain_newrelic_license_key: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        sentinel_metrics_history_days: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        sentinel_metrics_refresh_rate_seconds: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        sentinel_token: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        server_id: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        updated_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        wildcard_domain: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
      },
      undefined,
    ]),
    swarm_cluster: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    unreachable_count: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    unreachable_notification_sent: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    user: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    validation_logs: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getCreateServerResponseMock = (
  overrideResponse: Partial<CreateServer201> = {},
): CreateServer201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetServerByUuidResponseMock = (
  overrideResponse: Partial<ServerDTO> = {},
): ServerDTO => ({
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  high_disk_usage_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  ip: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  log_drain_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  port: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  proxy: faker.helpers.arrayElement([{}, undefined]),
  proxy_type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["traefik", "caddy", "none"] as const),
    undefined,
  ]),
  settings: faker.helpers.arrayElement([
    {
      concurrent_builds: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      delete_unused_networks: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      delete_unused_volumes: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      docker_cleanup_frequency: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      docker_cleanup_threshold: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      dynamic_timeout: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      force_disabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      force_server_cleanup: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      is_build_server: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_cloudflare_tunnel: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_jump_server: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_axiom_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_custom_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_highlight_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_newrelic_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_metrics_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_reachable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_sentinel_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_swarm_manager: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_swarm_worker: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_terminal_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_usable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      logdrain_axiom_api_key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_axiom_dataset_name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_custom_config: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_custom_config_parser: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_highlight_project_id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_newrelic_base_uri: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_newrelic_license_key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      sentinel_metrics_history_days: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      sentinel_metrics_refresh_rate_seconds: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      sentinel_token: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      server_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      wildcard_domain: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  swarm_cluster: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  unreachable_count: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  unreachable_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  user: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  validation_logs: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteServerByUuidResponseMock = (
  overrideResponse: Partial<DeleteServerByUuid200> = {},
): DeleteServerByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateServerByUuidResponseMock = (
  overrideResponse: Partial<ServerDTO> = {},
): ServerDTO => ({
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  high_disk_usage_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  ip: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  log_drain_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  port: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  proxy: faker.helpers.arrayElement([{}, undefined]),
  proxy_type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["traefik", "caddy", "none"] as const),
    undefined,
  ]),
  settings: faker.helpers.arrayElement([
    {
      concurrent_builds: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      delete_unused_networks: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      delete_unused_volumes: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      docker_cleanup_frequency: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      docker_cleanup_threshold: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      dynamic_timeout: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      force_disabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      force_server_cleanup: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      is_build_server: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_cloudflare_tunnel: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_jump_server: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_axiom_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_custom_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_highlight_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_logdrain_newrelic_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_metrics_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_reachable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_sentinel_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_swarm_manager: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_swarm_worker: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_terminal_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_usable: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      logdrain_axiom_api_key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_axiom_dataset_name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_custom_config: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_custom_config_parser: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_highlight_project_id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_newrelic_base_uri: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      logdrain_newrelic_license_key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      sentinel_metrics_history_days: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      sentinel_metrics_refresh_rate_seconds: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      sentinel_token: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      server_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      wildcard_domain: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  swarm_cluster: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  unreachable_count: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  unreachable_notification_sent: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  user: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  validation_logs: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetResourcesByServerUuidResponseMock =
  (): GetResourcesByServerUuid200Schema[] =>
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    }));

export const getGetDomainsByServerUuidResponseMock =
  (): GetDomainsByServerUuid200Schema[] =>
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      domains: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ max: 10, min: 1 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { max: 20, min: 10 } })),
        undefined,
      ]),
      ip: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    }));

export const getValidateServerByUuidResponseMock = (
  overrideResponse: Partial<ValidateServerByUuid201> = {},
): ValidateServerByUuid201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListServersMockHandler = (
  overrideResponse?:
    | ServerDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ServerDTO[]> | ServerDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/servers",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListServersResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateServerMockHandler = (
  overrideResponse?:
    | CreateServer201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateServer201> | CreateServer201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/servers",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateServerResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetServerByUuidMockHandler = (
  overrideResponse?:
    | ServerDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ServerDTO> | ServerDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/servers/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetServerByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeleteServerByUuidMockHandler = (
  overrideResponse?:
    | DeleteServerByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteServerByUuid200> | DeleteServerByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/servers/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteServerByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getUpdateServerByUuidMockHandler = (
  overrideResponse?:
    | ServerDTO
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ServerDTO> | ServerDTO),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/servers/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateServerByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetResourcesByServerUuidMockHandler = (
  overrideResponse?:
    | GetResourcesByServerUuid200Schema[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetResourcesByServerUuid200Schema[]>
        | GetResourcesByServerUuid200Schema[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/servers/:uuid/resources",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetResourcesByServerUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetDomainsByServerUuidMockHandler = (
  overrideResponse?:
    | GetDomainsByServerUuid200Schema[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetDomainsByServerUuid200Schema[]>
        | GetDomainsByServerUuid200Schema[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/servers/:uuid/domains",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetDomainsByServerUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getValidateServerByUuidMockHandler = (
  overrideResponse?:
    | ValidateServerByUuid201
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ValidateServerByUuid201> | ValidateServerByUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/servers/:uuid/validate",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getValidateServerByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};
export const getServersMock = () => [
  getListServersMockHandler(),
  getCreateServerMockHandler(),
  getGetServerByUuidMockHandler(),
  getDeleteServerByUuidMockHandler(),
  getUpdateServerByUuidMockHandler(),
  getGetResourcesByServerUuidMockHandler(),
  getGetDomainsByServerUuidMockHandler(),
  getValidateServerByUuidMockHandler(),
];
