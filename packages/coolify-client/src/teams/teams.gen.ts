/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";

import type {
  NHttp400Response,
  NHttp401Response,
  NHttp404Response,
  TeamDTO,
  UserDTO,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Get all teams.
 * @summary List
 */
export type listTeamsResponse200 = {
  data: TeamDTO[];
  status: 200;
};

export type listTeamsResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listTeamsResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listTeamsResponseSuccess = listTeamsResponse200 & {
  headers: Headers;
};
export type listTeamsResponseError = (
  | listTeamsResponse400
  | listTeamsResponse401
) & {
  headers: Headers;
};

export type listTeamsResponse =
  | listTeamsResponseSuccess
  | listTeamsResponseError;

export const getListTeamsUrl = () => {
  return `https://coolify.tsar-bmb.org/teams`;
};

export const listTeams = async (
  options?: RequestInit,
): Promise<listTeamsResponse> => {
  const res = await fetch(getListTeamsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listTeamsResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listTeamsResponse;
};

export const getListTeamsQueryKey = () => {
  return [`https://coolify.tsar-bmb.org/teams`] as const;
};

export const getListTeamsQueryOptions = <
  TData = Awaited<ReturnType<typeof listTeams>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTeams>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTeamsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTeams>>> = ({
    signal,
  }) => listTeams({ signal, ...fetchOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTeams>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTeamsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTeams>>
>;
export type ListTeamsQueryError = NHttp400Response | NHttp401Response;

export function useListTeams<
  TData = Awaited<ReturnType<typeof listTeams>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTeams>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTeams>>,
          TError,
          Awaited<ReturnType<typeof listTeams>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTeams<
  TData = Awaited<ReturnType<typeof listTeams>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTeams>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTeams>>,
          TError,
          Awaited<ReturnType<typeof listTeams>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTeams<
  TData = Awaited<ReturnType<typeof listTeams>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTeams>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListTeams<
  TData = Awaited<ReturnType<typeof listTeams>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listTeams>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListTeamsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get team by TeamId.
 * @summary Get
 */
export type getTeamByIdResponse200 = {
  data: TeamDTO;
  status: 200;
};

export type getTeamByIdResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getTeamByIdResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getTeamByIdResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getTeamByIdResponseSuccess = getTeamByIdResponse200 & {
  headers: Headers;
};
export type getTeamByIdResponseError = (
  | getTeamByIdResponse400
  | getTeamByIdResponse401
  | getTeamByIdResponse404
) & {
  headers: Headers;
};

export type getTeamByIdResponse =
  | getTeamByIdResponseSuccess
  | getTeamByIdResponseError;

export const getGetTeamByIdUrl = (id: number) => {
  return `https://coolify.tsar-bmb.org/teams/${id}`;
};

export const getTeamById = async (
  id: number,
  options?: RequestInit,
): Promise<getTeamByIdResponse> => {
  const res = await fetch(getGetTeamByIdUrl(id), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getTeamByIdResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getTeamByIdResponse;
};

export const getGetTeamByIdQueryKey = (id?: number) => {
  return [`https://coolify.tsar-bmb.org/teams/${id}`] as const;
};

export const getGetTeamByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamById>>> = ({
    signal,
  }) => getTeamById(id, { signal, ...fetchOptions });

  return {
    enabled: !!id,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamById>>
>;
export type GetTeamByIdQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTeamByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get members by TeamId.
 * @summary Members
 */
export type getMembersByTeamIdResponse200 = {
  data: UserDTO[];
  status: 200;
};

export type getMembersByTeamIdResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getMembersByTeamIdResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getMembersByTeamIdResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getMembersByTeamIdResponseSuccess =
  getMembersByTeamIdResponse200 & {
    headers: Headers;
  };
export type getMembersByTeamIdResponseError = (
  | getMembersByTeamIdResponse400
  | getMembersByTeamIdResponse401
  | getMembersByTeamIdResponse404
) & {
  headers: Headers;
};

export type getMembersByTeamIdResponse =
  | getMembersByTeamIdResponseSuccess
  | getMembersByTeamIdResponseError;

export const getGetMembersByTeamIdUrl = (id: number) => {
  return `https://coolify.tsar-bmb.org/teams/${id}/members`;
};

export const getMembersByTeamId = async (
  id: number,
  options?: RequestInit,
): Promise<getMembersByTeamIdResponse> => {
  const res = await fetch(getGetMembersByTeamIdUrl(id), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getMembersByTeamIdResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getMembersByTeamIdResponse;
};

export const getGetMembersByTeamIdQueryKey = (id?: number) => {
  return [`https://coolify.tsar-bmb.org/teams/${id}/members`] as const;
};

export const getGetMembersByTeamIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMembersByTeamId>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMembersByTeamId>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMembersByTeamIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMembersByTeamId>>
  > = ({ signal }) => getMembersByTeamId(id, { signal, ...fetchOptions });

  return {
    enabled: !!id,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMembersByTeamId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMembersByTeamIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMembersByTeamId>>
>;
export type GetMembersByTeamIdQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetMembersByTeamId<
  TData = Awaited<ReturnType<typeof getMembersByTeamId>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMembersByTeamId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMembersByTeamId>>,
          TError,
          Awaited<ReturnType<typeof getMembersByTeamId>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembersByTeamId<
  TData = Awaited<ReturnType<typeof getMembersByTeamId>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMembersByTeamId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMembersByTeamId>>,
          TError,
          Awaited<ReturnType<typeof getMembersByTeamId>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembersByTeamId<
  TData = Awaited<ReturnType<typeof getMembersByTeamId>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMembersByTeamId>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Members
 */

export function useGetMembersByTeamId<
  TData = Awaited<ReturnType<typeof getMembersByTeamId>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMembersByTeamId>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMembersByTeamIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get currently authenticated team.
 * @summary Authenticated Team
 */
export type getCurrentTeamResponse200 = {
  data: TeamDTO;
  status: 200;
};

export type getCurrentTeamResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getCurrentTeamResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getCurrentTeamResponseSuccess = getCurrentTeamResponse200 & {
  headers: Headers;
};
export type getCurrentTeamResponseError = (
  | getCurrentTeamResponse400
  | getCurrentTeamResponse401
) & {
  headers: Headers;
};

export type getCurrentTeamResponse =
  | getCurrentTeamResponseSuccess
  | getCurrentTeamResponseError;

export const getGetCurrentTeamUrl = () => {
  return `https://coolify.tsar-bmb.org/teams/current`;
};

export const getCurrentTeam = async (
  options?: RequestInit,
): Promise<getCurrentTeamResponse> => {
  const res = await fetch(getGetCurrentTeamUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getCurrentTeamResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getCurrentTeamResponse;
};

export const getGetCurrentTeamQueryKey = () => {
  return [`https://coolify.tsar-bmb.org/teams/current`] as const;
};

export const getGetCurrentTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentTeam>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCurrentTeam>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentTeamQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentTeam>>> = ({
    signal,
  }) => getCurrentTeam({ signal, ...fetchOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentTeam>>
>;
export type GetCurrentTeamQueryError = NHttp400Response | NHttp401Response;

export function useGetCurrentTeam<
  TData = Awaited<ReturnType<typeof getCurrentTeam>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentTeam>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentTeam>>,
          TError,
          Awaited<ReturnType<typeof getCurrentTeam>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentTeam<
  TData = Awaited<ReturnType<typeof getCurrentTeam>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentTeam>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentTeam>>,
          TError,
          Awaited<ReturnType<typeof getCurrentTeam>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentTeam<
  TData = Awaited<ReturnType<typeof getCurrentTeam>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentTeam>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Authenticated Team
 */

export function useGetCurrentTeam<
  TData = Awaited<ReturnType<typeof getCurrentTeam>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentTeam>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentTeamQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get currently authenticated team members.
 * @summary Authenticated Team Members
 */
export type getCurrentTeamMembersResponse200 = {
  data: UserDTO[];
  status: 200;
};

export type getCurrentTeamMembersResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getCurrentTeamMembersResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getCurrentTeamMembersResponseSuccess =
  getCurrentTeamMembersResponse200 & {
    headers: Headers;
  };
export type getCurrentTeamMembersResponseError = (
  | getCurrentTeamMembersResponse400
  | getCurrentTeamMembersResponse401
) & {
  headers: Headers;
};

export type getCurrentTeamMembersResponse =
  | getCurrentTeamMembersResponseSuccess
  | getCurrentTeamMembersResponseError;

export const getGetCurrentTeamMembersUrl = () => {
  return `https://coolify.tsar-bmb.org/teams/current/members`;
};

export const getCurrentTeamMembers = async (
  options?: RequestInit,
): Promise<getCurrentTeamMembersResponse> => {
  const res = await fetch(getGetCurrentTeamMembersUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getCurrentTeamMembersResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getCurrentTeamMembersResponse;
};

export const getGetCurrentTeamMembersQueryKey = () => {
  return [`https://coolify.tsar-bmb.org/teams/current/members`] as const;
};

export const getGetCurrentTeamMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentTeamMembers>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentTeamMembers>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentTeamMembersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentTeamMembers>>
  > = ({ signal }) => getCurrentTeamMembers({ signal, ...fetchOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentTeamMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentTeamMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentTeamMembers>>
>;
export type GetCurrentTeamMembersQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useGetCurrentTeamMembers<
  TData = Awaited<ReturnType<typeof getCurrentTeamMembers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentTeamMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getCurrentTeamMembers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentTeamMembers<
  TData = Awaited<ReturnType<typeof getCurrentTeamMembers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentTeamMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getCurrentTeamMembers>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentTeamMembers<
  TData = Awaited<ReturnType<typeof getCurrentTeamMembers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentTeamMembers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Authenticated Team Members
 */

export function useGetCurrentTeamMembers<
  TData = Awaited<ReturnType<typeof getCurrentTeamMembers>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentTeamMembers>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentTeamMembersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
