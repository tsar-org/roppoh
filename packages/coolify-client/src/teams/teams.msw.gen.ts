/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type { TeamDTO, UserDTO } from ".././model";

export const getListTeamsResponseMock = (): TeamDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    custom_server_limit: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    members: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ max: 10, min: 1 }) },
        (_, i) => i + 1,
      ).map(() => ({
        created_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        email: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        email_verified_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        force_password_reset: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        id: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        marketing_emails: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        two_factor_confirmed_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        updated_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
      })),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    personal_team: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    show_boarding: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getGetTeamByIdResponseMock = (
  overrideResponse: Partial<TeamDTO> = {},
): TeamDTO => ({
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  custom_server_limit: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  members: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      email_verified_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      force_password_reset: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      marketing_emails: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      two_factor_confirmed_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  personal_team: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  show_boarding: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetMembersByTeamIdResponseMock = (): UserDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    email: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    email_verified_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    force_password_reset: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    marketing_emails: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    two_factor_confirmed_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getGetCurrentTeamResponseMock = (
  overrideResponse: Partial<TeamDTO> = {},
): TeamDTO => ({
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  custom_server_limit: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  members: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      email_verified_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      force_password_reset: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      marketing_emails: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      two_factor_confirmed_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  personal_team: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  show_boarding: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCurrentTeamMembersResponseMock = (): UserDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    email: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    email_verified_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    force_password_reset: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    marketing_emails: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    two_factor_confirmed_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getListTeamsMockHandler = (
  overrideResponse?:
    | TeamDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TeamDTO[]> | TeamDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/teams",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListTeamsResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetTeamByIdMockHandler = (
  overrideResponse?:
    | TeamDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TeamDTO> | TeamDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/teams/:id",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetTeamByIdResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetMembersByTeamIdMockHandler = (
  overrideResponse?:
    | UserDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserDTO[]> | UserDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/teams/:id/members",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMembersByTeamIdResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetCurrentTeamMockHandler = (
  overrideResponse?:
    | TeamDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TeamDTO> | TeamDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/teams/current",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetCurrentTeamResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetCurrentTeamMembersMockHandler = (
  overrideResponse?:
    | UserDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserDTO[]> | UserDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/teams/current/members",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetCurrentTeamMembersResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getTeamsMock = () => [
  getListTeamsMockHandler(),
  getGetTeamByIdMockHandler(),
  getGetMembersByTeamIdMockHandler(),
  getGetCurrentTeamMockHandler(),
  getGetCurrentTeamMembersMockHandler(),
];
