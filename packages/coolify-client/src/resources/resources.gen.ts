/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";

import type { NHttp400Response, NHttp401Response } from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Get all resources.
 * @summary List
 */
export type listResourcesResponse200 = {
  data: string;
  status: 200;
};

export type listResourcesResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listResourcesResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listResourcesResponseSuccess = listResourcesResponse200 & {
  headers: Headers;
};
export type listResourcesResponseError = (
  | listResourcesResponse400
  | listResourcesResponse401
) & {
  headers: Headers;
};

export type listResourcesResponse =
  | listResourcesResponseSuccess
  | listResourcesResponseError;

export const getListResourcesUrl = () => {
  return `/api/coolify/resources`;
};

export const listResources = async (
  options?: RequestInit,
): Promise<listResourcesResponse> => {
  const res = await fetch(getListResourcesUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listResourcesResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listResourcesResponse;
};

export const getListResourcesQueryKey = () => {
  return [`/api/coolify/resources`] as const;
};

export const getListResourcesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listResources>>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof listResources>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListResourcesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listResources>>> = ({
    signal,
  }) => listResources({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listResources>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListResourcesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listResources>>
>;
export type ListResourcesInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListResourcesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listResources>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listResources>>,
          TError,
          Awaited<ReturnType<typeof listResources>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResourcesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listResources>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listResources>>,
          TError,
          Awaited<ReturnType<typeof listResources>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResourcesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listResources>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListResourcesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listResources>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListResourcesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListResourcesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListResourcesInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListResourcesQueryOptions = <
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListResourcesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listResources>>> = ({
    signal,
  }) => listResources({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listResources>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListResourcesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listResources>>
>;
export type ListResourcesQueryError = NHttp400Response | NHttp401Response;

export function useListResources<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listResources>>,
          TError,
          Awaited<ReturnType<typeof listResources>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResources<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listResources>>,
          TError,
          Awaited<ReturnType<typeof listResources>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResources<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListResources<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListResourcesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListResourcesQuery = async <
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listResources>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListResourcesQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListResourcesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof listResources>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListResourcesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listResources>>> = ({
    signal,
  }) => listResources({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listResources>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListResourcesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listResources>>
>;
export type ListResourcesSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListResourcesSuspense<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResourcesSuspense<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListResourcesSuspense<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListResourcesSuspense<
  TData = Awaited<ReturnType<typeof listResources>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listResources>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListResourcesSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
