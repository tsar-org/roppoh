/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  ApplicationDTO,
  CreateDockercomposeApplication201,
  CreateDockerfileApplication201,
  CreateDockerimageApplication201,
  CreateEnvByApplicationUuid201,
  CreatePrivateDeployKeyApplication201,
  CreatePrivateGithubAppApplication201,
  CreatePublicApplication201,
  DeleteApplicationByUuid200,
  DeleteEnvByApplicationUuid200,
  EnvironmentVariableDTO,
  GetApplicationLogsByUuid200,
  RestartApplicationByUuid200,
  StartApplicationByUuid200,
  StopApplicationByUuid200,
  UpdateApplicationByUuid200,
  UpdateEnvByApplicationUuid201,
  UpdateEnvsByApplicationUuid201,
} from ".././model";

export const getListApplicationsResponseMock = (): ApplicationDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    base_directory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    build_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    build_pack: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "nixpacks",
        "static",
        "dockerfile",
        "dockercompose",
      ] as const),
      undefined,
    ]),
    compose_parsing_version: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    config_hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    custom_docker_run_options: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_healthcheck_found: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    custom_labels: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_network_aliases: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_nginx_configuration: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    deleted_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    destination_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    destination_type: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_custom_build_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_custom_start_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_domains: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_location: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose_raw: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_registry_image_name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_registry_image_tag: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    dockerfile: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    dockerfile_location: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    dockerfile_target_build: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    environment_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    fqdn: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    git_branch: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    git_commit_sha: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    git_full_url: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    git_repository: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    health_check_host: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_interval: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_method: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_path: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_port: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_response_text: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_retries: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_return_code: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_scheme: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_start_period: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_timeout: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    http_basic_auth_password: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    http_basic_auth_username: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    install_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    is_http_basic_auth_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    limits_cpu_shares: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    limits_cpus: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_cpuset: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    limits_memory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_reservation: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_swap: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_swappiness: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    manual_webhook_secret_bitbucket: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_gitea: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_github: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_gitlab: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    ports_exposes: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    ports_mappings: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    post_deployment_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    post_deployment_command_container: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    pre_deployment_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    pre_deployment_command_container: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    preview_url_template: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    private_key_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    publish_directory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    redirect: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.helpers.arrayElement(["www", "non-www", "both"] as const),
        null,
      ]),
      undefined,
    ]),
    repository_project_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    source_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    start_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    static_image: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    swarm_placement_constraints: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    swarm_replicas: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    watch_paths: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
  }));

export const getCreatePublicApplicationResponseMock = (
  overrideResponse: Partial<CreatePublicApplication201> = {},
): CreatePublicApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreatePrivateGithubAppApplicationResponseMock = (
  overrideResponse: Partial<CreatePrivateGithubAppApplication201> = {},
): CreatePrivateGithubAppApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreatePrivateDeployKeyApplicationResponseMock = (
  overrideResponse: Partial<CreatePrivateDeployKeyApplication201> = {},
): CreatePrivateDeployKeyApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateDockerfileApplicationResponseMock = (
  overrideResponse: Partial<CreateDockerfileApplication201> = {},
): CreateDockerfileApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateDockerimageApplicationResponseMock = (
  overrideResponse: Partial<CreateDockerimageApplication201> = {},
): CreateDockerimageApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateDockercomposeApplicationResponseMock = (
  overrideResponse: Partial<CreateDockercomposeApplication201> = {},
): CreateDockercomposeApplication201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApplicationByUuidResponseMock = (
  overrideResponse: Partial<ApplicationDTO> = {},
): ApplicationDTO => ({
  base_directory: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  build_command: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  build_pack: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "nixpacks",
      "static",
      "dockerfile",
      "dockercompose",
    ] as const),
    undefined,
  ]),
  compose_parsing_version: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  config_hash: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  custom_docker_run_options: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  custom_healthcheck_found: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  custom_labels: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  custom_network_aliases: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  custom_nginx_configuration: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  deleted_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  destination_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  destination_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  docker_compose: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_compose_custom_build_command: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_compose_custom_start_command: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_compose_domains: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_compose_location: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  docker_compose_raw: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_registry_image_name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  docker_registry_image_tag: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  dockerfile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  dockerfile_location: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  dockerfile_target_build: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  environment_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  fqdn: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  git_branch: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  git_commit_sha: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  git_full_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  git_repository: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  health_check_enabled: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  health_check_host: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  health_check_interval: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  health_check_method: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  health_check_path: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  health_check_port: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  health_check_response_text: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  health_check_retries: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  health_check_return_code: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  health_check_scheme: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  health_check_start_period: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  health_check_timeout: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  http_basic_auth_password: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  http_basic_auth_username: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  install_command: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  is_http_basic_auth_enabled: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  limits_cpu_shares: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  limits_cpus: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  limits_cpuset: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  limits_memory: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  limits_memory_reservation: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  limits_memory_swap: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  limits_memory_swappiness: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  manual_webhook_secret_bitbucket: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  manual_webhook_secret_gitea: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  manual_webhook_secret_github: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  manual_webhook_secret_gitlab: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ports_exposes: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ports_mappings: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  post_deployment_command: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  post_deployment_command_container: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  pre_deployment_command: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  pre_deployment_command_container: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  preview_url_template: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  private_key_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      null,
    ]),
    undefined,
  ]),
  publish_directory: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  redirect: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.arrayElement(["www", "non-www", "both"] as const),
      null,
    ]),
    undefined,
  ]),
  repository_project_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      null,
    ]),
    undefined,
  ]),
  source_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      null,
    ]),
    undefined,
  ]),
  start_command: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  static_image: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  swarm_placement_constraints: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  swarm_replicas: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      null,
    ]),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  watch_paths: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteApplicationByUuidResponseMock = (
  overrideResponse: Partial<DeleteApplicationByUuid200> = {},
): DeleteApplicationByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateApplicationByUuidResponseMock = (
  overrideResponse: Partial<UpdateApplicationByUuid200> = {},
): UpdateApplicationByUuid200 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApplicationLogsByUuidResponseMock = (
  overrideResponse: Partial<GetApplicationLogsByUuid200> = {},
): GetApplicationLogsByUuid200 => ({
  logs: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListEnvsByApplicationUuidResponseMock =
  (): EnvironmentVariableDTO[] =>
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      is_buildtime: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_literal: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_multiline: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_preview: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_runtime: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_shared: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_shown_once: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      real_value: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      resourceable_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      resourceable_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      value: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    }));

export const getCreateEnvByApplicationUuidResponseMock = (
  overrideResponse: Partial<CreateEnvByApplicationUuid201> = {},
): CreateEnvByApplicationUuid201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateEnvByApplicationUuidResponseMock = (
  overrideResponse: Partial<UpdateEnvByApplicationUuid201> = {},
): UpdateEnvByApplicationUuid201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateEnvsByApplicationUuidResponseMock = (
  overrideResponse: Partial<UpdateEnvsByApplicationUuid201> = {},
): UpdateEnvsByApplicationUuid201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteEnvByApplicationUuidResponseMock = (
  overrideResponse: Partial<DeleteEnvByApplicationUuid200> = {},
): DeleteEnvByApplicationUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStartApplicationByUuidResponseMock = (
  overrideResponse: Partial<StartApplicationByUuid200> = {},
): StartApplicationByUuid200 => ({
  deployment_uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStopApplicationByUuidResponseMock = (
  overrideResponse: Partial<StopApplicationByUuid200> = {},
): StopApplicationByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRestartApplicationByUuidResponseMock = (
  overrideResponse: Partial<RestartApplicationByUuid200> = {},
): RestartApplicationByUuid200 => ({
  deployment_uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListApplicationsMockHandler = (
  overrideResponse?:
    | ApplicationDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ApplicationDTO[]> | ApplicationDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListApplicationsResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreatePublicApplicationMockHandler = (
  overrideResponse?:
    | CreatePublicApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreatePublicApplication201> | CreatePublicApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/public",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreatePublicApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getCreatePrivateGithubAppApplicationMockHandler = (
  overrideResponse?:
    | CreatePrivateGithubAppApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreatePrivateGithubAppApplication201>
        | CreatePrivateGithubAppApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/private-github-app",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreatePrivateGithubAppApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getCreatePrivateDeployKeyApplicationMockHandler = (
  overrideResponse?:
    | CreatePrivateDeployKeyApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreatePrivateDeployKeyApplication201>
        | CreatePrivateDeployKeyApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/private-deploy-key",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreatePrivateDeployKeyApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getCreateDockerfileApplicationMockHandler = (
  overrideResponse?:
    | CreateDockerfileApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreateDockerfileApplication201>
        | CreateDockerfileApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/dockerfile",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateDockerfileApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getCreateDockerimageApplicationMockHandler = (
  overrideResponse?:
    | CreateDockerimageApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreateDockerimageApplication201>
        | CreateDockerimageApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/dockerimage",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateDockerimageApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getCreateDockercomposeApplicationMockHandler = (
  overrideResponse?:
    | CreateDockercomposeApplication201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreateDockercomposeApplication201>
        | CreateDockercomposeApplication201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/dockercompose",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateDockercomposeApplicationResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetApplicationByUuidMockHandler = (
  overrideResponse?:
    | ApplicationDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ApplicationDTO> | ApplicationDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeleteApplicationByUuidMockHandler = (
  overrideResponse?:
    | DeleteApplicationByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteApplicationByUuid200> | DeleteApplicationByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/applications/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getUpdateApplicationByUuidMockHandler = (
  overrideResponse?:
    | UpdateApplicationByUuid200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateApplicationByUuid200> | UpdateApplicationByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/applications/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetApplicationLogsByUuidMockHandler = (
  overrideResponse?:
    | GetApplicationLogsByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetApplicationLogsByUuid200> | GetApplicationLogsByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid/logs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetApplicationLogsByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getListEnvsByApplicationUuidMockHandler = (
  overrideResponse?:
    | EnvironmentVariableDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EnvironmentVariableDTO[]> | EnvironmentVariableDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListEnvsByApplicationUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateEnvByApplicationUuidMockHandler = (
  overrideResponse?:
    | CreateEnvByApplicationUuid201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreateEnvByApplicationUuid201>
        | CreateEnvByApplicationUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/applications/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateEnvByApplicationUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getUpdateEnvByApplicationUuidMockHandler = (
  overrideResponse?:
    | UpdateEnvByApplicationUuid201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<UpdateEnvByApplicationUuid201>
        | UpdateEnvByApplicationUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/applications/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateEnvByApplicationUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getUpdateEnvsByApplicationUuidMockHandler = (
  overrideResponse?:
    | UpdateEnvsByApplicationUuid201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<UpdateEnvsByApplicationUuid201>
        | UpdateEnvsByApplicationUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/applications/:uuid/envs/bulk",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateEnvsByApplicationUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getDeleteEnvByApplicationUuidMockHandler = (
  overrideResponse?:
    | DeleteEnvByApplicationUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<DeleteEnvByApplicationUuid200>
        | DeleteEnvByApplicationUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/applications/:uuid/envs/:envUuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteEnvByApplicationUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getStartApplicationByUuidMockHandler = (
  overrideResponse?:
    | StartApplicationByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StartApplicationByUuid200> | StartApplicationByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid/start",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStartApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getStopApplicationByUuidMockHandler = (
  overrideResponse?:
    | StopApplicationByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StopApplicationByUuid200> | StopApplicationByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStopApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getRestartApplicationByUuidMockHandler = (
  overrideResponse?:
    | RestartApplicationByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RestartApplicationByUuid200> | RestartApplicationByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/applications/:uuid/restart",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRestartApplicationByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getApplicationsMock = () => [
  getListApplicationsMockHandler(),
  getCreatePublicApplicationMockHandler(),
  getCreatePrivateGithubAppApplicationMockHandler(),
  getCreatePrivateDeployKeyApplicationMockHandler(),
  getCreateDockerfileApplicationMockHandler(),
  getCreateDockerimageApplicationMockHandler(),
  getCreateDockercomposeApplicationMockHandler(),
  getGetApplicationByUuidMockHandler(),
  getDeleteApplicationByUuidMockHandler(),
  getUpdateApplicationByUuidMockHandler(),
  getGetApplicationLogsByUuidMockHandler(),
  getListEnvsByApplicationUuidMockHandler(),
  getCreateEnvByApplicationUuidMockHandler(),
  getUpdateEnvByApplicationUuidMockHandler(),
  getUpdateEnvsByApplicationUuidMockHandler(),
  getDeleteEnvByApplicationUuidMockHandler(),
  getStartApplicationByUuidMockHandler(),
  getStopApplicationByUuidMockHandler(),
  getRestartApplicationByUuidMockHandler(),
];
