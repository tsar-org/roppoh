/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  CreateEnvironment201,
  CreateProject201,
  DeleteEnvironment200,
  DeleteProjectByUuid200,
  EnvironmentDTO,
  ProjectDTO,
  UpdateProjectByUuid201,
} from ".././model";

export const getListProjectsResponseMock = (): ProjectDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    environments: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ max: 10, min: 1 }) },
        (_, i) => i + 1,
      ).map(() => ({
        created_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        id: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
        project_id: faker.helpers.arrayElement([
          faker.number.int({ max: undefined, min: undefined }),
          undefined,
        ]),
        updated_at: faker.helpers.arrayElement([
          faker.string.alpha({ length: { max: 20, min: 10 } }),
          undefined,
        ]),
      })),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getCreateProjectResponseMock = (
  overrideResponse: Partial<CreateProject201> = {},
): CreateProject201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetProjectByUuidResponseMock = (
  overrideResponse: Partial<ProjectDTO> = {},
): ProjectDTO => ({
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  environments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      description: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteProjectByUuidResponseMock = (
  overrideResponse: Partial<DeleteProjectByUuid200> = {},
): DeleteProjectByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateProjectByUuidResponseMock = (
  overrideResponse: Partial<UpdateProjectByUuid201> = {},
): UpdateProjectByUuid201 => ({
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetEnvironmentByNameOrUuidResponseMock = (
  overrideResponse: Partial<EnvironmentDTO> = {},
): EnvironmentDTO => ({
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  project_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetEnvironmentsResponseMock = (): EnvironmentDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    project_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getCreateEnvironmentResponseMock = (
  overrideResponse: Partial<CreateEnvironment201> = {},
): CreateEnvironment201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteEnvironmentResponseMock = (
  overrideResponse: Partial<DeleteEnvironment200> = {},
): DeleteEnvironment200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListProjectsMockHandler = (
  overrideResponse?:
    | ProjectDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProjectDTO[]> | ProjectDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/projects",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListProjectsResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateProjectMockHandler = (
  overrideResponse?:
    | CreateProject201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateProject201> | CreateProject201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/projects",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateProjectResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetProjectByUuidMockHandler = (
  overrideResponse?:
    | ProjectDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProjectDTO> | ProjectDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/projects/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetProjectByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeleteProjectByUuidMockHandler = (
  overrideResponse?:
    | DeleteProjectByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteProjectByUuid200> | DeleteProjectByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/projects/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteProjectByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getUpdateProjectByUuidMockHandler = (
  overrideResponse?:
    | UpdateProjectByUuid201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateProjectByUuid201> | UpdateProjectByUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/projects/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateProjectByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetEnvironmentByNameOrUuidMockHandler = (
  overrideResponse?:
    | EnvironmentDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EnvironmentDTO> | EnvironmentDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/projects/:uuid/:environmentNameOrUuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEnvironmentByNameOrUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetEnvironmentsMockHandler = (
  overrideResponse?:
    | EnvironmentDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EnvironmentDTO[]> | EnvironmentDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/projects/:uuid/environments",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEnvironmentsResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateEnvironmentMockHandler = (
  overrideResponse?:
    | CreateEnvironment201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateEnvironment201> | CreateEnvironment201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/projects/:uuid/environments",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateEnvironmentResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getDeleteEnvironmentMockHandler = (
  overrideResponse?:
    | DeleteEnvironment200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteEnvironment200> | DeleteEnvironment200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/projects/:uuid/environments/:environmentNameOrUuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteEnvironmentResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getProjectsMock = () => [
  getListProjectsMockHandler(),
  getCreateProjectMockHandler(),
  getGetProjectByUuidMockHandler(),
  getDeleteProjectByUuidMockHandler(),
  getUpdateProjectByUuidMockHandler(),
  getGetEnvironmentByNameOrUuidMockHandler(),
  getGetEnvironmentsMockHandler(),
  getCreateEnvironmentMockHandler(),
  getDeleteEnvironmentMockHandler(),
];
