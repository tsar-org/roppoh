/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
  CreateEnvironment201,
  CreateEnvironmentBodies,
  CreateProject201,
  CreateProjectBodies,
  DeleteEnvironment200,
  DeleteProjectByUuid200,
  EnvironmentDTO,
  NHttp400Response,
  NHttp401Response,
  NHttp404Response,
  ProjectDTO,
  UpdateProjectByUuid201,
  UpdateProjectByUuidBodies,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List projects.
 * @summary List
 */
export type listProjectsResponse200 = {
  data: ProjectDTO[];
  status: 200;
};

export type listProjectsResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listProjectsResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listProjectsResponseSuccess = listProjectsResponse200 & {
  headers: Headers;
};
export type listProjectsResponseError = (
  | listProjectsResponse400
  | listProjectsResponse401
) & {
  headers: Headers;
};

export type listProjectsResponse =
  | listProjectsResponseSuccess
  | listProjectsResponseError;

export const getListProjectsUrl = () => {
  return `https://coolify.tsar-bmb.org/projects`;
};

export const listProjects = async (
  options?: RequestInit,
): Promise<listProjectsResponse> => {
  const res = await fetch(getListProjectsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listProjectsResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listProjectsResponse;
};

export const getListProjectsQueryKey = () => {
  return [`https://coolify.tsar-bmb.org/projects`] as const;
};

export const getListProjectsQueryOptions = <
  TData = Awaited<ReturnType<typeof listProjects>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listProjects>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListProjectsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listProjects>>> = ({
    signal,
  }) => listProjects({ signal, ...fetchOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listProjects>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListProjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listProjects>>
>;
export type ListProjectsQueryError = NHttp400Response | NHttp401Response;

export function useListProjects<
  TData = Awaited<ReturnType<typeof listProjects>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProjects>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProjects>>,
          TError,
          Awaited<ReturnType<typeof listProjects>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListProjects<
  TData = Awaited<ReturnType<typeof listProjects>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProjects>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProjects>>,
          TError,
          Awaited<ReturnType<typeof listProjects>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListProjects<
  TData = Awaited<ReturnType<typeof listProjects>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProjects>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListProjects<
  TData = Awaited<ReturnType<typeof listProjects>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProjects>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListProjectsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create Project.
 * @summary Create
 */
export type createProjectResponse201 = {
  data: CreateProject201;
  status: 201;
};

export type createProjectResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createProjectResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createProjectResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type createProjectResponseSuccess = createProjectResponse201 & {
  headers: Headers;
};
export type createProjectResponseError = (
  | createProjectResponse400
  | createProjectResponse401
  | createProjectResponse404
) & {
  headers: Headers;
};

export type createProjectResponse =
  | createProjectResponseSuccess
  | createProjectResponseError;

export const getCreateProjectUrl = () => {
  return `https://coolify.tsar-bmb.org/projects`;
};

export const createProject = async (
  createProjectBodies: CreateProjectBodies,
  options?: RequestInit,
): Promise<createProjectResponse> => {
  const res = await fetch(getCreateProjectUrl(), {
    ...options,
    body: JSON.stringify(createProjectBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createProjectResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createProjectResponse;
};

export const getCreateProjectMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createProject>>,
    TError,
    { data: CreateProjectBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createProject>>,
  TError,
  { data: CreateProjectBodies },
  TContext
> => {
  const mutationKey = ["createProject"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createProject>>,
    { data: CreateProjectBodies }
  > = (props) => {
    const { data } = props ?? {};

    return createProject(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof createProject>>
>;
export type CreateProjectMutationBody = CreateProjectBodies;
export type CreateProjectMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Create
 */
export const useCreateProject = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createProject>>,
      TError,
      { data: CreateProjectBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createProject>>,
  TError,
  { data: CreateProjectBodies },
  TContext
> => {
  const mutationOptions = getCreateProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get project by UUID.
 * @summary Get
 */
export type getProjectByUuidResponse200 = {
  data: ProjectDTO;
  status: 200;
};

export type getProjectByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getProjectByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getProjectByUuidResponse404 = {
  data: void;
  status: 404;
};

export type getProjectByUuidResponseSuccess = getProjectByUuidResponse200 & {
  headers: Headers;
};
export type getProjectByUuidResponseError = (
  | getProjectByUuidResponse400
  | getProjectByUuidResponse401
  | getProjectByUuidResponse404
) & {
  headers: Headers;
};

export type getProjectByUuidResponse =
  | getProjectByUuidResponseSuccess
  | getProjectByUuidResponseError;

export const getGetProjectByUuidUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}`;
};

export const getProjectByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getProjectByUuidResponse> => {
  const res = await fetch(getGetProjectByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getProjectByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getProjectByUuidResponse;
};

export const getGetProjectByUuidQueryKey = (uuid?: string) => {
  return [`https://coolify.tsar-bmb.org/projects/${uuid}`] as const;
};

export const getGetProjectByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getProjectByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProjectByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProjectByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProjectByUuid>>
  > = ({ signal }) => getProjectByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProjectByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProjectByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectByUuid>>
>;
export type GetProjectByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | void;

export function useGetProjectByUuid<
  TData = Awaited<ReturnType<typeof getProjectByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProjectByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectByUuid>>,
          TError,
          Awaited<ReturnType<typeof getProjectByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProjectByUuid<
  TData = Awaited<ReturnType<typeof getProjectByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProjectByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectByUuid>>,
          TError,
          Awaited<ReturnType<typeof getProjectByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProjectByUuid<
  TData = Awaited<ReturnType<typeof getProjectByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProjectByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetProjectByUuid<
  TData = Awaited<ReturnType<typeof getProjectByUuid>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProjectByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProjectByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete project by UUID.
 * @summary Delete
 */
export type deleteProjectByUuidResponse200 = {
  data: DeleteProjectByUuid200;
  status: 200;
};

export type deleteProjectByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deleteProjectByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deleteProjectByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type deleteProjectByUuidResponseSuccess =
  deleteProjectByUuidResponse200 & {
    headers: Headers;
  };
export type deleteProjectByUuidResponseError = (
  | deleteProjectByUuidResponse400
  | deleteProjectByUuidResponse401
  | deleteProjectByUuidResponse404
) & {
  headers: Headers;
};

export type deleteProjectByUuidResponse =
  | deleteProjectByUuidResponseSuccess
  | deleteProjectByUuidResponseError;

export const getDeleteProjectByUuidUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}`;
};

export const deleteProjectByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<deleteProjectByUuidResponse> => {
  const res = await fetch(getDeleteProjectByUuidUrl(uuid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deleteProjectByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deleteProjectByUuidResponse;
};

export const getDeleteProjectByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProjectByUuid>>,
    TError,
    { uuid: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProjectByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationKey = ["deleteProjectByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProjectByUuid>>,
    { uuid: string }
  > = (props) => {
    const { uuid } = props ?? {};

    return deleteProjectByUuid(uuid, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProjectByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProjectByUuid>>
>;

export type DeleteProjectByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Delete
 */
export const useDeleteProjectByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteProjectByUuid>>,
      TError,
      { uuid: string },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteProjectByUuid>>,
  TError,
  { uuid: string },
  TContext
> => {
  const mutationOptions = getDeleteProjectByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update Project.
 * @summary Update
 */
export type updateProjectByUuidResponse201 = {
  data: UpdateProjectByUuid201;
  status: 201;
};

export type updateProjectByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updateProjectByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updateProjectByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type updateProjectByUuidResponseSuccess =
  updateProjectByUuidResponse201 & {
    headers: Headers;
  };
export type updateProjectByUuidResponseError = (
  | updateProjectByUuidResponse400
  | updateProjectByUuidResponse401
  | updateProjectByUuidResponse404
) & {
  headers: Headers;
};

export type updateProjectByUuidResponse =
  | updateProjectByUuidResponseSuccess
  | updateProjectByUuidResponseError;

export const getUpdateProjectByUuidUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}`;
};

export const updateProjectByUuid = async (
  uuid: string,
  updateProjectByUuidBodies: UpdateProjectByUuidBodies,
  options?: RequestInit,
): Promise<updateProjectByUuidResponse> => {
  const res = await fetch(getUpdateProjectByUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(updateProjectByUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updateProjectByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updateProjectByUuidResponse;
};

export const getUpdateProjectByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProjectByUuid>>,
    TError,
    { uuid: string; data: UpdateProjectByUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProjectByUuid>>,
  TError,
  { uuid: string; data: UpdateProjectByUuidBodies },
  TContext
> => {
  const mutationKey = ["updateProjectByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProjectByUuid>>,
    { uuid: string; data: UpdateProjectByUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return updateProjectByUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProjectByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProjectByUuid>>
>;
export type UpdateProjectByUuidMutationBody = UpdateProjectByUuidBodies;
export type UpdateProjectByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Update
 */
export const useUpdateProjectByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateProjectByUuid>>,
      TError,
      { uuid: string; data: UpdateProjectByUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateProjectByUuid>>,
  TError,
  { uuid: string; data: UpdateProjectByUuidBodies },
  TContext
> => {
  const mutationOptions = getUpdateProjectByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get environment by name or UUID.
 * @summary Environment
 */
export type getEnvironmentByNameOrUuidResponse200 = {
  data: EnvironmentDTO;
  status: 200;
};

export type getEnvironmentByNameOrUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getEnvironmentByNameOrUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getEnvironmentByNameOrUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getEnvironmentByNameOrUuidResponseSuccess =
  getEnvironmentByNameOrUuidResponse200 & {
    headers: Headers;
  };
export type getEnvironmentByNameOrUuidResponseError = (
  | getEnvironmentByNameOrUuidResponse400
  | getEnvironmentByNameOrUuidResponse401
  | getEnvironmentByNameOrUuidResponse404
) & {
  headers: Headers;
};

export type getEnvironmentByNameOrUuidResponse =
  | getEnvironmentByNameOrUuidResponseSuccess
  | getEnvironmentByNameOrUuidResponseError;

export const getGetEnvironmentByNameOrUuidUrl = (
  uuid: string,
  environmentNameOrUuid: string,
) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}/${environmentNameOrUuid}`;
};

export const getEnvironmentByNameOrUuid = async (
  uuid: string,
  environmentNameOrUuid: string,
  options?: RequestInit,
): Promise<getEnvironmentByNameOrUuidResponse> => {
  const res = await fetch(
    getGetEnvironmentByNameOrUuidUrl(uuid, environmentNameOrUuid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getEnvironmentByNameOrUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getEnvironmentByNameOrUuidResponse;
};

export const getGetEnvironmentByNameOrUuidQueryKey = (
  uuid?: string,
  environmentNameOrUuid?: string,
) => {
  return [
    `https://coolify.tsar-bmb.org/projects/${uuid}/${environmentNameOrUuid}`,
  ] as const;
};

export const getGetEnvironmentByNameOrUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  environmentNameOrUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEnvironmentByNameOrUuidQueryKey(uuid, environmentNameOrUuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>
  > = ({ signal }) =>
    getEnvironmentByNameOrUuid(uuid, environmentNameOrUuid, {
      signal,
      ...fetchOptions,
    });

  return {
    enabled: !!(uuid && environmentNameOrUuid),
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEnvironmentByNameOrUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>
>;
export type GetEnvironmentByNameOrUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetEnvironmentByNameOrUuid<
  TData = Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  environmentNameOrUuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEnvironmentByNameOrUuid<
  TData = Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  environmentNameOrUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEnvironmentByNameOrUuid<
  TData = Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  environmentNameOrUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Environment
 */

export function useGetEnvironmentByNameOrUuid<
  TData = Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  environmentNameOrUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironmentByNameOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEnvironmentByNameOrUuidQueryOptions(
    uuid,
    environmentNameOrUuid,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List all environments in a project.
 * @summary List Environments
 */
export type getEnvironmentsResponse200 = {
  data: EnvironmentDTO[];
  status: 200;
};

export type getEnvironmentsResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getEnvironmentsResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getEnvironmentsResponse404 = {
  data: void;
  status: 404;
};

export type getEnvironmentsResponseSuccess = getEnvironmentsResponse200 & {
  headers: Headers;
};
export type getEnvironmentsResponseError = (
  | getEnvironmentsResponse400
  | getEnvironmentsResponse401
  | getEnvironmentsResponse404
) & {
  headers: Headers;
};

export type getEnvironmentsResponse =
  | getEnvironmentsResponseSuccess
  | getEnvironmentsResponseError;

export const getGetEnvironmentsUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}/environments`;
};

export const getEnvironments = async (
  uuid: string,
  options?: RequestInit,
): Promise<getEnvironmentsResponse> => {
  const res = await fetch(getGetEnvironmentsUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getEnvironmentsResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getEnvironmentsResponse;
};

export const getGetEnvironmentsQueryKey = (uuid?: string) => {
  return [
    `https://coolify.tsar-bmb.org/projects/${uuid}/environments`,
  ] as const;
};

export const getGetEnvironmentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEnvironments>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEnvironmentsQueryKey(uuid);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnvironments>>> = ({
    signal,
  }) => getEnvironments(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEnvironments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEnvironmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEnvironments>>
>;
export type GetEnvironmentsQueryError =
  | NHttp400Response
  | NHttp401Response
  | void;

export function useGetEnvironments<
  TData = Awaited<ReturnType<typeof getEnvironments>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironments>>,
          TError,
          Awaited<ReturnType<typeof getEnvironments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEnvironments<
  TData = Awaited<ReturnType<typeof getEnvironments>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironments>>,
          TError,
          Awaited<ReturnType<typeof getEnvironments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEnvironments<
  TData = Awaited<ReturnType<typeof getEnvironments>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Environments
 */

export function useGetEnvironments<
  TData = Awaited<ReturnType<typeof getEnvironments>>,
  TError = NHttp400Response | NHttp401Response | void,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEnvironments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEnvironmentsQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create environment in project.
 * @summary Create Environment
 */
export type createEnvironmentResponse201 = {
  data: CreateEnvironment201;
  status: 201;
};

export type createEnvironmentResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createEnvironmentResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createEnvironmentResponse404 = {
  data: void;
  status: 404;
};

export type createEnvironmentResponse409 = {
  data: void;
  status: 409;
};

export type createEnvironmentResponseSuccess = createEnvironmentResponse201 & {
  headers: Headers;
};
export type createEnvironmentResponseError = (
  | createEnvironmentResponse400
  | createEnvironmentResponse401
  | createEnvironmentResponse404
  | createEnvironmentResponse409
) & {
  headers: Headers;
};

export type createEnvironmentResponse =
  | createEnvironmentResponseSuccess
  | createEnvironmentResponseError;

export const getCreateEnvironmentUrl = (uuid: string) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}/environments`;
};

export const createEnvironment = async (
  uuid: string,
  createEnvironmentBodies: CreateEnvironmentBodies,
  options?: RequestInit,
): Promise<createEnvironmentResponse> => {
  const res = await fetch(getCreateEnvironmentUrl(uuid), {
    ...options,
    body: JSON.stringify(createEnvironmentBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createEnvironmentResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createEnvironmentResponse;
};

export const getCreateEnvironmentMutationOptions = <
  TError = NHttp400Response | NHttp401Response | void | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEnvironment>>,
    TError,
    { uuid: string; data: CreateEnvironmentBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEnvironment>>,
  TError,
  { uuid: string; data: CreateEnvironmentBodies },
  TContext
> => {
  const mutationKey = ["createEnvironment"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEnvironment>>,
    { uuid: string; data: CreateEnvironmentBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return createEnvironment(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEnvironmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createEnvironment>>
>;
export type CreateEnvironmentMutationBody = CreateEnvironmentBodies;
export type CreateEnvironmentMutationError =
  | NHttp400Response
  | NHttp401Response
  | void
  | void;

/**
 * @summary Create Environment
 */
export const useCreateEnvironment = <
  TError = NHttp400Response | NHttp401Response | void | void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createEnvironment>>,
      TError,
      { uuid: string; data: CreateEnvironmentBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createEnvironment>>,
  TError,
  { uuid: string; data: CreateEnvironmentBodies },
  TContext
> => {
  const mutationOptions = getCreateEnvironmentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete environment by name or UUID. Environment must be empty.
 * @summary Delete Environment
 */
export type deleteEnvironmentResponse200 = {
  data: DeleteEnvironment200;
  status: 200;
};

export type deleteEnvironmentResponse400 = {
  data: void;
  status: 400;
};

export type deleteEnvironmentResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deleteEnvironmentResponse404 = {
  data: void;
  status: 404;
};

export type deleteEnvironmentResponseSuccess = deleteEnvironmentResponse200 & {
  headers: Headers;
};
export type deleteEnvironmentResponseError = (
  | deleteEnvironmentResponse400
  | deleteEnvironmentResponse401
  | deleteEnvironmentResponse404
) & {
  headers: Headers;
};

export type deleteEnvironmentResponse =
  | deleteEnvironmentResponseSuccess
  | deleteEnvironmentResponseError;

export const getDeleteEnvironmentUrl = (
  uuid: string,
  environmentNameOrUuid: string,
) => {
  return `https://coolify.tsar-bmb.org/projects/${uuid}/environments/${environmentNameOrUuid}`;
};

export const deleteEnvironment = async (
  uuid: string,
  environmentNameOrUuid: string,
  options?: RequestInit,
): Promise<deleteEnvironmentResponse> => {
  const res = await fetch(
    getDeleteEnvironmentUrl(uuid, environmentNameOrUuid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deleteEnvironmentResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deleteEnvironmentResponse;
};

export const getDeleteEnvironmentMutationOptions = <
  TError = void | NHttp401Response | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEnvironment>>,
    TError,
    { uuid: string; environmentNameOrUuid: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEnvironment>>,
  TError,
  { uuid: string; environmentNameOrUuid: string },
  TContext
> => {
  const mutationKey = ["deleteEnvironment"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEnvironment>>,
    { uuid: string; environmentNameOrUuid: string }
  > = (props) => {
    const { uuid, environmentNameOrUuid } = props ?? {};

    return deleteEnvironment(uuid, environmentNameOrUuid, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEnvironmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteEnvironment>>
>;

export type DeleteEnvironmentMutationError = void | NHttp401Response | void;

/**
 * @summary Delete Environment
 */
export const useDeleteEnvironment = <
  TError = void | NHttp401Response | void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteEnvironment>>,
      TError,
      { uuid: string; environmentNameOrUuid: string },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteEnvironment>>,
  TError,
  { uuid: string; environmentNameOrUuid: string },
  TContext
> => {
  const mutationOptions = getDeleteEnvironmentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
