/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  DeleteDatabaseByUuid200,
  RestartDatabaseByUuid200,
  StartDatabaseByUuid200,
  StopDatabaseByUuid200,
} from ".././model";

export const getListDatabasesResponseMock = (): string => faker.word.sample();

export const getGetDatabaseByUuidResponseMock = (): string =>
  faker.word.sample();

export const getDeleteDatabaseByUuidResponseMock = (
  overrideResponse: Partial<DeleteDatabaseByUuid200> = {},
): DeleteDatabaseByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStartDatabaseByUuidResponseMock = (
  overrideResponse: Partial<StartDatabaseByUuid200> = {},
): StartDatabaseByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStopDatabaseByUuidResponseMock = (
  overrideResponse: Partial<StopDatabaseByUuid200> = {},
): StopDatabaseByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRestartDatabaseByUuidResponseMock = (
  overrideResponse: Partial<RestartDatabaseByUuid200> = {},
): RestartDatabaseByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListDatabasesMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/databases",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListDatabasesResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetDatabaseByUuidMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/databases/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetDatabaseByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeleteDatabaseByUuidMockHandler = (
  overrideResponse?:
    | DeleteDatabaseByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteDatabaseByUuid200> | DeleteDatabaseByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/databases/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteDatabaseByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getUpdateDatabaseByUuidMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/databases/:uuid",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabasePostgresqlMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/postgresql",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseClickhouseMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/clickhouse",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseDragonflyMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/dragonfly",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseRedisMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/redis",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseKeydbMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/keydb",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseMariadbMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/mariadb",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseMysqlMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/mysql",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getCreateDatabaseMongodbMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/databases/mongodb",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getStartDatabaseByUuidMockHandler = (
  overrideResponse?:
    | StartDatabaseByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StartDatabaseByUuid200> | StartDatabaseByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/databases/:uuid/start",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStartDatabaseByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getStopDatabaseByUuidMockHandler = (
  overrideResponse?:
    | StopDatabaseByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StopDatabaseByUuid200> | StopDatabaseByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/databases/:uuid/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStopDatabaseByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getRestartDatabaseByUuidMockHandler = (
  overrideResponse?:
    | RestartDatabaseByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RestartDatabaseByUuid200> | RestartDatabaseByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/databases/:uuid/restart",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRestartDatabaseByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getDatabasesMock = () => [
  getListDatabasesMockHandler(),
  getGetDatabaseByUuidMockHandler(),
  getDeleteDatabaseByUuidMockHandler(),
  getUpdateDatabaseByUuidMockHandler(),
  getCreateDatabasePostgresqlMockHandler(),
  getCreateDatabaseClickhouseMockHandler(),
  getCreateDatabaseDragonflyMockHandler(),
  getCreateDatabaseRedisMockHandler(),
  getCreateDatabaseKeydbMockHandler(),
  getCreateDatabaseMariadbMockHandler(),
  getCreateDatabaseMysqlMockHandler(),
  getCreateDatabaseMongodbMockHandler(),
  getStartDatabaseByUuidMockHandler(),
  getStopDatabaseByUuidMockHandler(),
  getRestartDatabaseByUuidMockHandler(),
];
