/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";

import type {
  CreateEnvByServiceUuid201,
  CreateEnvByServiceUuidBodies,
  CreateService201,
  CreateServiceBodies,
  DeleteEnvByServiceUuid200,
  DeleteServiceByUuid200,
  DeleteServiceByUuidParams,
  EnvironmentVariableDTO,
  NHttp400Response,
  NHttp401Response,
  NHttp404Response,
  RestartServiceByUuid200,
  RestartServiceByUuidParams,
  ServiceDTO,
  StartServiceByUuid200,
  StopServiceByUuid200,
  UpdateEnvByServiceUuid201,
  UpdateEnvByServiceUuidBodies,
  UpdateEnvsByServiceUuid201,
  UpdateEnvsByServiceUuidBodies,
  UpdateServiceByUuid200,
  UpdateServiceByUuidBodies,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List all services.
 * @summary List
 */
export type listServicesResponse200 = {
  data: ServiceDTO[];
  status: 200;
};

export type listServicesResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listServicesResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listServicesResponseSuccess = listServicesResponse200 & {
  headers: Headers;
};
export type listServicesResponseError = (
  | listServicesResponse400
  | listServicesResponse401
) & {
  headers: Headers;
};

export type listServicesResponse =
  | listServicesResponseSuccess
  | listServicesResponseError;

export const getListServicesUrl = () => {
  return `http://localhost:3000/api/coolify/services`;
};

export const listServices = async (
  options?: RequestInit,
): Promise<listServicesResponse> => {
  const res = await fetch(getListServicesUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  console.log("body: ", body);

  const data: listServicesResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listServicesResponse;
};

export const getListServicesQueryKey = () => {
  return [`/api/coolify/services`] as const;
};

export const getListServicesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listServices>>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof listServices>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServicesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServices>>> = ({
    signal,
  }) => listServices({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServicesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServices>>
>;
export type ListServicesInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListServicesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServices>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServices>>,
          TError,
          Awaited<ReturnType<typeof listServices>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServices>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServices>>,
          TError,
          Awaited<ReturnType<typeof listServices>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServices>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServicesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listServices>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServicesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListServicesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListServicesInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServicesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServices>>> = ({
    signal,
  }) => listServices({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServices>>
>;
export type ListServicesQueryError = NHttp400Response | NHttp401Response;

export function useListServices<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServices>>,
          TError,
          Awaited<ReturnType<typeof listServices>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServices<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServices>>,
          TError,
          Awaited<ReturnType<typeof listServices>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServices<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServices<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServicesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListServicesQuery = async <
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listServices>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListServicesQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListServicesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof listServices>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListServicesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listServices>>> = ({
    signal,
  }) => listServices({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListServicesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listServices>>
>;
export type ListServicesSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListServicesSuspense<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesSuspense<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListServicesSuspense<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListServicesSuspense<
  TData = Awaited<ReturnType<typeof listServices>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listServices>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListServicesSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a one-click / custom service
 * @summary Create service
 */
export type createServiceResponse201 = {
  data: CreateService201;
  status: 201;
};

export type createServiceResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createServiceResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createServiceResponseSuccess = createServiceResponse201 & {
  headers: Headers;
};
export type createServiceResponseError = (
  | createServiceResponse400
  | createServiceResponse401
) & {
  headers: Headers;
};

export type createServiceResponse =
  | createServiceResponseSuccess
  | createServiceResponseError;

export const getCreateServiceUrl = () => {
  return `/api/coolify/services`;
};

export const createService = async (
  createServiceBodies: CreateServiceBodies,
  options?: RequestInit,
): Promise<createServiceResponse> => {
  const res = await fetch(getCreateServiceUrl(), {
    ...options,
    body: JSON.stringify(createServiceBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createServiceResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createServiceResponse;
};

export const getCreateServiceMutationOptions = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createService>>,
    TError,
    { data: CreateServiceBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createService>>,
  TError,
  { data: CreateServiceBodies },
  TContext
> => {
  const mutationKey = ["createService"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createService>>,
    { data: CreateServiceBodies }
  > = (props) => {
    const { data } = props ?? {};

    return createService(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof createService>>
>;
export type CreateServiceMutationBody = CreateServiceBodies;
export type CreateServiceMutationError = NHttp400Response | NHttp401Response;

/**
 * @summary Create service
 */
export const useCreateService = <
  TError = NHttp400Response | NHttp401Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createService>>,
      TError,
      { data: CreateServiceBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createService>>,
  TError,
  { data: CreateServiceBodies },
  TContext
> => {
  const mutationOptions = getCreateServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get service by UUID.
 * @summary Get
 */
export type getServiceByUuidResponse200 = {
  data: ServiceDTO;
  status: 200;
};

export type getServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getServiceByUuidResponseSuccess = getServiceByUuidResponse200 & {
  headers: Headers;
};
export type getServiceByUuidResponseError = (
  | getServiceByUuidResponse400
  | getServiceByUuidResponse401
  | getServiceByUuidResponse404
) & {
  headers: Headers;
};

export type getServiceByUuidResponse =
  | getServiceByUuidResponseSuccess
  | getServiceByUuidResponseError;

export const getGetServiceByUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}`;
};

export const getServiceByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getServiceByUuidResponse> => {
  const res = await fetch(getGetServiceByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getServiceByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getServiceByUuidResponse;
};

export const getGetServiceByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/services/${uuid}`] as const;
};

export const getGetServiceByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getServiceByUuid>>
  > = ({ signal }) => getServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServiceByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServiceByUuid>>
>;
export type GetServiceByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServiceByUuidInfiniteQueryOptions(uuid, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetServiceByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetServiceByUuidInfiniteQueryOptions(uuid, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetServiceByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getServiceByUuid>>
  > = ({ signal }) => getServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServiceByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServiceByUuid>>
>;
export type GetServiceByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServiceByUuid<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuid<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof getServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuid<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServiceByUuid<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServiceByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetServiceByUuidQuery = async <
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetServiceByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetServiceByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getServiceByUuid>>
  > = ({ signal }) => getServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServiceByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServiceByUuid>>
>;
export type GetServiceByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof getServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServiceByUuidSuspenseQueryOptions(uuid, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete service by UUID.
 * @summary Delete
 */
export type deleteServiceByUuidResponse200 = {
  data: DeleteServiceByUuid200;
  status: 200;
};

export type deleteServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deleteServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deleteServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type deleteServiceByUuidResponseSuccess =
  deleteServiceByUuidResponse200 & {
    headers: Headers;
  };
export type deleteServiceByUuidResponseError = (
  | deleteServiceByUuidResponse400
  | deleteServiceByUuidResponse401
  | deleteServiceByUuidResponse404
) & {
  headers: Headers;
};

export type deleteServiceByUuidResponse =
  | deleteServiceByUuidResponseSuccess
  | deleteServiceByUuidResponseError;

export const getDeleteServiceByUuidUrl = (
  uuid: string,
  params?: DeleteServiceByUuidParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/coolify/services/${uuid}?${stringifiedParams}`
    : `/api/coolify/services/${uuid}`;
};

export const deleteServiceByUuid = async (
  uuid: string,
  params?: DeleteServiceByUuidParams,
  options?: RequestInit,
): Promise<deleteServiceByUuidResponse> => {
  const res = await fetch(getDeleteServiceByUuidUrl(uuid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deleteServiceByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deleteServiceByUuidResponse;
};

export const getDeleteServiceByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteServiceByUuid>>,
    TError,
    { uuid: string; params?: DeleteServiceByUuidParams },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteServiceByUuid>>,
  TError,
  { uuid: string; params?: DeleteServiceByUuidParams },
  TContext
> => {
  const mutationKey = ["deleteServiceByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteServiceByUuid>>,
    { uuid: string; params?: DeleteServiceByUuidParams }
  > = (props) => {
    const { uuid, params } = props ?? {};

    return deleteServiceByUuid(uuid, params, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteServiceByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteServiceByUuid>>
>;

export type DeleteServiceByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Delete
 */
export const useDeleteServiceByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteServiceByUuid>>,
      TError,
      { uuid: string; params?: DeleteServiceByUuidParams },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteServiceByUuid>>,
  TError,
  { uuid: string; params?: DeleteServiceByUuidParams },
  TContext
> => {
  const mutationOptions = getDeleteServiceByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update service by UUID.
 * @summary Update
 */
export type updateServiceByUuidResponse200 = {
  data: UpdateServiceByUuid200;
  status: 200;
};

export type updateServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updateServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updateServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type updateServiceByUuidResponseSuccess =
  updateServiceByUuidResponse200 & {
    headers: Headers;
  };
export type updateServiceByUuidResponseError = (
  | updateServiceByUuidResponse400
  | updateServiceByUuidResponse401
  | updateServiceByUuidResponse404
) & {
  headers: Headers;
};

export type updateServiceByUuidResponse =
  | updateServiceByUuidResponseSuccess
  | updateServiceByUuidResponseError;

export const getUpdateServiceByUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}`;
};

export const updateServiceByUuid = async (
  uuid: string,
  updateServiceByUuidBodies: UpdateServiceByUuidBodies,
  options?: RequestInit,
): Promise<updateServiceByUuidResponse> => {
  const res = await fetch(getUpdateServiceByUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(updateServiceByUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updateServiceByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updateServiceByUuidResponse;
};

export const getUpdateServiceByUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServiceByUuid>>,
    TError,
    { uuid: string; data: UpdateServiceByUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateServiceByUuid>>,
  TError,
  { uuid: string; data: UpdateServiceByUuidBodies },
  TContext
> => {
  const mutationKey = ["updateServiceByUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateServiceByUuid>>,
    { uuid: string; data: UpdateServiceByUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return updateServiceByUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateServiceByUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateServiceByUuid>>
>;
export type UpdateServiceByUuidMutationBody = UpdateServiceByUuidBodies;
export type UpdateServiceByUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Update
 */
export const useUpdateServiceByUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateServiceByUuid>>,
      TError,
      { uuid: string; data: UpdateServiceByUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateServiceByUuid>>,
  TError,
  { uuid: string; data: UpdateServiceByUuidBodies },
  TContext
> => {
  const mutationOptions = getUpdateServiceByUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List all envs by service UUID.
 * @summary List Envs
 */
export type listEnvsByServiceUuidResponse200 = {
  data: EnvironmentVariableDTO[];
  status: 200;
};

export type listEnvsByServiceUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listEnvsByServiceUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listEnvsByServiceUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type listEnvsByServiceUuidResponseSuccess =
  listEnvsByServiceUuidResponse200 & {
    headers: Headers;
  };
export type listEnvsByServiceUuidResponseError = (
  | listEnvsByServiceUuidResponse400
  | listEnvsByServiceUuidResponse401
  | listEnvsByServiceUuidResponse404
) & {
  headers: Headers;
};

export type listEnvsByServiceUuidResponse =
  | listEnvsByServiceUuidResponseSuccess
  | listEnvsByServiceUuidResponseError;

export const getListEnvsByServiceUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/envs`;
};

export const listEnvsByServiceUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<listEnvsByServiceUuidResponse> => {
  const res = await fetch(getListEnvsByServiceUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listEnvsByServiceUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listEnvsByServiceUuidResponse;
};

export const getListEnvsByServiceUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/services/${uuid}/envs`] as const;
};

export const getListEnvsByServiceUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listEnvsByServiceUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListEnvsByServiceUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>
  > = ({ signal }) => listEnvsByServiceUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListEnvsByServiceUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listEnvsByServiceUuid>>
>;
export type ListEnvsByServiceUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useListEnvsByServiceUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listEnvsByServiceUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
          TError,
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listEnvsByServiceUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
          TError,
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listEnvsByServiceUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Envs
 */

export function useListEnvsByServiceUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listEnvsByServiceUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListEnvsByServiceUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Envs
 */
export const prefetchListEnvsByServiceUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListEnvsByServiceUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListEnvsByServiceUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListEnvsByServiceUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>
  > = ({ signal }) => listEnvsByServiceUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListEnvsByServiceUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof listEnvsByServiceUuid>>
>;
export type ListEnvsByServiceUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useListEnvsByServiceUuid<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
          TError,
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuid<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
          TError,
          Awaited<ReturnType<typeof listEnvsByServiceUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuid<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Envs
 */

export function useListEnvsByServiceUuid<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListEnvsByServiceUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Envs
 */
export const prefetchListEnvsByServiceUuidQuery = async <
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListEnvsByServiceUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListEnvsByServiceUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListEnvsByServiceUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>
  > = ({ signal }) => listEnvsByServiceUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListEnvsByServiceUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listEnvsByServiceUuid>>
>;
export type ListEnvsByServiceUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useListEnvsByServiceUuidSuspense<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuidSuspense<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListEnvsByServiceUuidSuspense<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Envs
 */

export function useListEnvsByServiceUuidSuspense<
  TData = Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listEnvsByServiceUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListEnvsByServiceUuidSuspenseQueryOptions(
    uuid,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create env by service UUID.
 * @summary Create Env
 */
export type createEnvByServiceUuidResponse201 = {
  data: CreateEnvByServiceUuid201;
  status: 201;
};

export type createEnvByServiceUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type createEnvByServiceUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type createEnvByServiceUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type createEnvByServiceUuidResponseSuccess =
  createEnvByServiceUuidResponse201 & {
    headers: Headers;
  };
export type createEnvByServiceUuidResponseError = (
  | createEnvByServiceUuidResponse400
  | createEnvByServiceUuidResponse401
  | createEnvByServiceUuidResponse404
) & {
  headers: Headers;
};

export type createEnvByServiceUuidResponse =
  | createEnvByServiceUuidResponseSuccess
  | createEnvByServiceUuidResponseError;

export const getCreateEnvByServiceUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/envs`;
};

export const createEnvByServiceUuid = async (
  uuid: string,
  createEnvByServiceUuidBodies: CreateEnvByServiceUuidBodies,
  options?: RequestInit,
): Promise<createEnvByServiceUuidResponse> => {
  const res = await fetch(getCreateEnvByServiceUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(createEnvByServiceUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: createEnvByServiceUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as createEnvByServiceUuidResponse;
};

export const getCreateEnvByServiceUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEnvByServiceUuid>>,
    TError,
    { uuid: string; data: CreateEnvByServiceUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEnvByServiceUuid>>,
  TError,
  { uuid: string; data: CreateEnvByServiceUuidBodies },
  TContext
> => {
  const mutationKey = ["createEnvByServiceUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEnvByServiceUuid>>,
    { uuid: string; data: CreateEnvByServiceUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return createEnvByServiceUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateEnvByServiceUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof createEnvByServiceUuid>>
>;
export type CreateEnvByServiceUuidMutationBody = CreateEnvByServiceUuidBodies;
export type CreateEnvByServiceUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Create Env
 */
export const useCreateEnvByServiceUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createEnvByServiceUuid>>,
      TError,
      { uuid: string; data: CreateEnvByServiceUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createEnvByServiceUuid>>,
  TError,
  { uuid: string; data: CreateEnvByServiceUuidBodies },
  TContext
> => {
  const mutationOptions = getCreateEnvByServiceUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update env by service UUID.
 * @summary Update Env
 */
export type updateEnvByServiceUuidResponse201 = {
  data: UpdateEnvByServiceUuid201;
  status: 201;
};

export type updateEnvByServiceUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updateEnvByServiceUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updateEnvByServiceUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type updateEnvByServiceUuidResponseSuccess =
  updateEnvByServiceUuidResponse201 & {
    headers: Headers;
  };
export type updateEnvByServiceUuidResponseError = (
  | updateEnvByServiceUuidResponse400
  | updateEnvByServiceUuidResponse401
  | updateEnvByServiceUuidResponse404
) & {
  headers: Headers;
};

export type updateEnvByServiceUuidResponse =
  | updateEnvByServiceUuidResponseSuccess
  | updateEnvByServiceUuidResponseError;

export const getUpdateEnvByServiceUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/envs`;
};

export const updateEnvByServiceUuid = async (
  uuid: string,
  updateEnvByServiceUuidBodies: UpdateEnvByServiceUuidBodies,
  options?: RequestInit,
): Promise<updateEnvByServiceUuidResponse> => {
  const res = await fetch(getUpdateEnvByServiceUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(updateEnvByServiceUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updateEnvByServiceUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updateEnvByServiceUuidResponse;
};

export const getUpdateEnvByServiceUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEnvByServiceUuid>>,
    TError,
    { uuid: string; data: UpdateEnvByServiceUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEnvByServiceUuid>>,
  TError,
  { uuid: string; data: UpdateEnvByServiceUuidBodies },
  TContext
> => {
  const mutationKey = ["updateEnvByServiceUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEnvByServiceUuid>>,
    { uuid: string; data: UpdateEnvByServiceUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return updateEnvByServiceUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEnvByServiceUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateEnvByServiceUuid>>
>;
export type UpdateEnvByServiceUuidMutationBody = UpdateEnvByServiceUuidBodies;
export type UpdateEnvByServiceUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Update Env
 */
export const useUpdateEnvByServiceUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEnvByServiceUuid>>,
      TError,
      { uuid: string; data: UpdateEnvByServiceUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEnvByServiceUuid>>,
  TError,
  { uuid: string; data: UpdateEnvByServiceUuidBodies },
  TContext
> => {
  const mutationOptions = getUpdateEnvByServiceUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update multiple envs by service UUID.
 * @summary Update Envs (Bulk)
 */
export type updateEnvsByServiceUuidResponse201 = {
  data: UpdateEnvsByServiceUuid201;
  status: 201;
};

export type updateEnvsByServiceUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type updateEnvsByServiceUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type updateEnvsByServiceUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type updateEnvsByServiceUuidResponseSuccess =
  updateEnvsByServiceUuidResponse201 & {
    headers: Headers;
  };
export type updateEnvsByServiceUuidResponseError = (
  | updateEnvsByServiceUuidResponse400
  | updateEnvsByServiceUuidResponse401
  | updateEnvsByServiceUuidResponse404
) & {
  headers: Headers;
};

export type updateEnvsByServiceUuidResponse =
  | updateEnvsByServiceUuidResponseSuccess
  | updateEnvsByServiceUuidResponseError;

export const getUpdateEnvsByServiceUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/envs/bulk`;
};

export const updateEnvsByServiceUuid = async (
  uuid: string,
  updateEnvsByServiceUuidBodies: UpdateEnvsByServiceUuidBodies,
  options?: RequestInit,
): Promise<updateEnvsByServiceUuidResponse> => {
  const res = await fetch(getUpdateEnvsByServiceUuidUrl(uuid), {
    ...options,
    body: JSON.stringify(updateEnvsByServiceUuidBodies),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: updateEnvsByServiceUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as updateEnvsByServiceUuidResponse;
};

export const getUpdateEnvsByServiceUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEnvsByServiceUuid>>,
    TError,
    { uuid: string; data: UpdateEnvsByServiceUuidBodies },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEnvsByServiceUuid>>,
  TError,
  { uuid: string; data: UpdateEnvsByServiceUuidBodies },
  TContext
> => {
  const mutationKey = ["updateEnvsByServiceUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEnvsByServiceUuid>>,
    { uuid: string; data: UpdateEnvsByServiceUuidBodies }
  > = (props) => {
    const { uuid, data } = props ?? {};

    return updateEnvsByServiceUuid(uuid, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateEnvsByServiceUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateEnvsByServiceUuid>>
>;
export type UpdateEnvsByServiceUuidMutationBody = UpdateEnvsByServiceUuidBodies;
export type UpdateEnvsByServiceUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Update Envs (Bulk)
 */
export const useUpdateEnvsByServiceUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateEnvsByServiceUuid>>,
      TError,
      { uuid: string; data: UpdateEnvsByServiceUuidBodies },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateEnvsByServiceUuid>>,
  TError,
  { uuid: string; data: UpdateEnvsByServiceUuidBodies },
  TContext
> => {
  const mutationOptions = getUpdateEnvsByServiceUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete env by UUID.
 * @summary Delete Env
 */
export type deleteEnvByServiceUuidResponse200 = {
  data: DeleteEnvByServiceUuid200;
  status: 200;
};

export type deleteEnvByServiceUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deleteEnvByServiceUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deleteEnvByServiceUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type deleteEnvByServiceUuidResponseSuccess =
  deleteEnvByServiceUuidResponse200 & {
    headers: Headers;
  };
export type deleteEnvByServiceUuidResponseError = (
  | deleteEnvByServiceUuidResponse400
  | deleteEnvByServiceUuidResponse401
  | deleteEnvByServiceUuidResponse404
) & {
  headers: Headers;
};

export type deleteEnvByServiceUuidResponse =
  | deleteEnvByServiceUuidResponseSuccess
  | deleteEnvByServiceUuidResponseError;

export const getDeleteEnvByServiceUuidUrl = (uuid: string, envUuid: string) => {
  return `/api/coolify/services/${uuid}/envs/${envUuid}`;
};

export const deleteEnvByServiceUuid = async (
  uuid: string,
  envUuid: string,
  options?: RequestInit,
): Promise<deleteEnvByServiceUuidResponse> => {
  const res = await fetch(getDeleteEnvByServiceUuidUrl(uuid, envUuid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deleteEnvByServiceUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deleteEnvByServiceUuidResponse;
};

export const getDeleteEnvByServiceUuidMutationOptions = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEnvByServiceUuid>>,
    TError,
    { uuid: string; envUuid: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEnvByServiceUuid>>,
  TError,
  { uuid: string; envUuid: string },
  TContext
> => {
  const mutationKey = ["deleteEnvByServiceUuid"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { fetch: undefined, mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEnvByServiceUuid>>,
    { uuid: string; envUuid: string }
  > = (props) => {
    const { uuid, envUuid } = props ?? {};

    return deleteEnvByServiceUuid(uuid, envUuid, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEnvByServiceUuidMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteEnvByServiceUuid>>
>;

export type DeleteEnvByServiceUuidMutationError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

/**
 * @summary Delete Env
 */
export const useDeleteEnvByServiceUuid = <
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteEnvByServiceUuid>>,
      TError,
      { uuid: string; envUuid: string },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteEnvByServiceUuid>>,
  TError,
  { uuid: string; envUuid: string },
  TContext
> => {
  const mutationOptions = getDeleteEnvByServiceUuidMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Start service. `Post` request is also accepted.
 * @summary Start
 */
export type startServiceByUuidResponse200 = {
  data: StartServiceByUuid200;
  status: 200;
};

export type startServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type startServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type startServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type startServiceByUuidResponseSuccess =
  startServiceByUuidResponse200 & {
    headers: Headers;
  };
export type startServiceByUuidResponseError = (
  | startServiceByUuidResponse400
  | startServiceByUuidResponse401
  | startServiceByUuidResponse404
) & {
  headers: Headers;
};

export type startServiceByUuidResponse =
  | startServiceByUuidResponseSuccess
  | startServiceByUuidResponseError;

export const getStartServiceByUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/start`;
};

export const startServiceByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<startServiceByUuidResponse> => {
  const res = await fetch(getStartServiceByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: startServiceByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as startServiceByUuidResponse;
};

export const getStartServiceByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/services/${uuid}/start`] as const;
};

export const getStartServiceByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof startServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStartServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof startServiceByUuid>>
  > = ({ signal }) => startServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof startServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StartServiceByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof startServiceByUuid>>
>;
export type StartServiceByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof startServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof startServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof startServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof startServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof startServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof startServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof startServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Start
 */

export function useStartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof startServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStartServiceByUuidInfiniteQueryOptions(uuid, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Start
 */
export const prefetchStartServiceByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getStartServiceByUuidInfiniteQueryOptions(uuid, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getStartServiceByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStartServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof startServiceByUuid>>
  > = ({ signal }) => startServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof startServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StartServiceByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof startServiceByUuid>>
>;
export type StartServiceByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStartServiceByUuid<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof startServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof startServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuid<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof startServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof startServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuid<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Start
 */

export function useStartServiceByUuid<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStartServiceByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Start
 */
export const prefetchStartServiceByUuidQuery = async <
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getStartServiceByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getStartServiceByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStartServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof startServiceByUuid>>
  > = ({ signal }) => startServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof startServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StartServiceByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof startServiceByUuid>>
>;
export type StartServiceByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Start
 */

export function useStartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof startServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof startServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStartServiceByUuidSuspenseQueryOptions(uuid, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Stop service. `Post` request is also accepted.
 * @summary Stop
 */
export type stopServiceByUuidResponse200 = {
  data: StopServiceByUuid200;
  status: 200;
};

export type stopServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type stopServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type stopServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type stopServiceByUuidResponseSuccess = stopServiceByUuidResponse200 & {
  headers: Headers;
};
export type stopServiceByUuidResponseError = (
  | stopServiceByUuidResponse400
  | stopServiceByUuidResponse401
  | stopServiceByUuidResponse404
) & {
  headers: Headers;
};

export type stopServiceByUuidResponse =
  | stopServiceByUuidResponseSuccess
  | stopServiceByUuidResponseError;

export const getStopServiceByUuidUrl = (uuid: string) => {
  return `/api/coolify/services/${uuid}/stop`;
};

export const stopServiceByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<stopServiceByUuidResponse> => {
  const res = await fetch(getStopServiceByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: stopServiceByUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as stopServiceByUuidResponse;
};

export const getStopServiceByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/services/${uuid}/stop`] as const;
};

export const getStopServiceByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof stopServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getStopServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stopServiceByUuid>>
  > = ({ signal }) => stopServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof stopServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StopServiceByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof stopServiceByUuid>>
>;
export type StopServiceByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStopServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof stopServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stopServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof stopServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof stopServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stopServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof stopServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof stopServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Stop
 */

export function useStopServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof stopServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStopServiceByUuidInfiniteQueryOptions(uuid, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Stop
 */
export const prefetchStopServiceByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getStopServiceByUuidInfiniteQueryOptions(uuid, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getStopServiceByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getStopServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stopServiceByUuid>>
  > = ({ signal }) => stopServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof stopServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StopServiceByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof stopServiceByUuid>>
>;
export type StopServiceByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStopServiceByUuid<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stopServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof stopServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuid<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stopServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof stopServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuid<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Stop
 */

export function useStopServiceByUuid<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStopServiceByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Stop
 */
export const prefetchStopServiceByUuidQuery = async <
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getStopServiceByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getStopServiceByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getStopServiceByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stopServiceByUuid>>
  > = ({ signal }) => stopServiceByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof stopServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type StopServiceByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof stopServiceByUuid>>
>;
export type StopServiceByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useStopServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useStopServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Stop
 */

export function useStopServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof stopServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof stopServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getStopServiceByUuidSuspenseQueryOptions(uuid, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Restart service. `Post` request is also accepted.
 * @summary Restart
 */
export type restartServiceByUuidResponse200 = {
  data: RestartServiceByUuid200;
  status: 200;
};

export type restartServiceByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type restartServiceByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type restartServiceByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type restartServiceByUuidResponseSuccess =
  restartServiceByUuidResponse200 & {
    headers: Headers;
  };
export type restartServiceByUuidResponseError = (
  | restartServiceByUuidResponse400
  | restartServiceByUuidResponse401
  | restartServiceByUuidResponse404
) & {
  headers: Headers;
};

export type restartServiceByUuidResponse =
  | restartServiceByUuidResponseSuccess
  | restartServiceByUuidResponseError;

export const getRestartServiceByUuidUrl = (
  uuid: string,
  params?: RestartServiceByUuidParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/coolify/services/${uuid}/restart?${stringifiedParams}`
    : `/api/coolify/services/${uuid}/restart`;
};

export const restartServiceByUuid = async (
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: RequestInit,
): Promise<restartServiceByUuidResponse> => {
  const res = await fetch(getRestartServiceByUuidUrl(uuid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: restartServiceByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as restartServiceByUuidResponse;
};

export const getRestartServiceByUuidQueryKey = (
  uuid?: string,
  params?: RestartServiceByUuidParams,
) => {
  return [
    `/api/coolify/services/${uuid}/restart`,
    ...(params ? [params] : []),
  ] as const;
};

export const getRestartServiceByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof restartServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRestartServiceByUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof restartServiceByUuid>>
  > = ({ signal }) =>
    restartServiceByUuid(uuid, params, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof restartServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RestartServiceByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof restartServiceByUuid>>
>;
export type RestartServiceByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useRestartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof restartServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params: undefined | RestartServiceByUuidParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof restartServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof restartServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof restartServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof restartServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof restartServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof restartServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Restart
 */

export function useRestartServiceByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof restartServiceByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRestartServiceByUuidInfiniteQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Restart
 */
export const prefetchRestartServiceByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getRestartServiceByUuidInfiniteQueryOptions(
    uuid,
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getRestartServiceByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRestartServiceByUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof restartServiceByUuid>>
  > = ({ signal }) =>
    restartServiceByUuid(uuid, params, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof restartServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RestartServiceByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof restartServiceByUuid>>
>;
export type RestartServiceByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useRestartServiceByUuid<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params: undefined | RestartServiceByUuidParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof restartServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof restartServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuid<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof restartServiceByUuid>>,
          TError,
          Awaited<ReturnType<typeof restartServiceByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuid<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Restart
 */

export function useRestartServiceByUuid<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRestartServiceByUuidQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Restart
 */
export const prefetchRestartServiceByUuidQuery = async <
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getRestartServiceByUuidQueryOptions(
    uuid,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getRestartServiceByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRestartServiceByUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof restartServiceByUuid>>
  > = ({ signal }) =>
    restartServiceByUuid(uuid, params, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof restartServiceByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RestartServiceByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof restartServiceByUuid>>
>;
export type RestartServiceByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useRestartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params: undefined | RestartServiceByUuidParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRestartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Restart
 */

export function useRestartServiceByUuidSuspense<
  TData = Awaited<ReturnType<typeof restartServiceByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  params?: RestartServiceByUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof restartServiceByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRestartServiceByUuidSuspenseQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
