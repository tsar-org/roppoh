/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  CreateEnvByServiceUuid201,
  CreateService201,
  DeleteEnvByServiceUuid200,
  DeleteServiceByUuid200,
  EnvironmentVariableDTO,
  RestartServiceByUuid200,
  ServiceDTO,
  StartServiceByUuid200,
  StopServiceByUuid200,
  UpdateEnvByServiceUuid201,
  UpdateEnvsByServiceUuid201,
  UpdateServiceByUuid200,
} from ".././model";

export const getListServicesResponseMock = (): ServiceDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    config_hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    connect_to_docker_network: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    deleted_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    destination_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    destination_type: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose_raw: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    environment_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    is_container_label_escape_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    is_container_label_readonly_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    server_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    service_type: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
  }));

export const getCreateServiceResponseMock = (
  overrideResponse: Partial<CreateService201> = {},
): CreateService201 => ({
  domains: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { max: 20, min: 10 } })),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetServiceByUuidResponseMock = (
  overrideResponse: Partial<ServiceDTO> = {},
): ServiceDTO => ({
  config_hash: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  connect_to_docker_network: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  deleted_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  destination_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  destination_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  docker_compose: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  docker_compose_raw: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  environment_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  is_container_label_escape_enabled: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_container_label_readonly_enabled: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  server_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  service_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteServiceByUuidResponseMock = (
  overrideResponse: Partial<DeleteServiceByUuid200> = {},
): DeleteServiceByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateServiceByUuidResponseMock = (
  overrideResponse: Partial<UpdateServiceByUuid200> = {},
): UpdateServiceByUuid200 => ({
  domains: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { max: 20, min: 10 } })),
    undefined,
  ]),
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListEnvsByServiceUuidResponseMock =
  (): EnvironmentVariableDTO[] =>
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      is_buildtime: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_literal: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_multiline: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_preview: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_runtime: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_shared: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      is_shown_once: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      key: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      real_value: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      resourceable_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      resourceable_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      value: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    }));

export const getCreateEnvByServiceUuidResponseMock = (
  overrideResponse: Partial<CreateEnvByServiceUuid201> = {},
): CreateEnvByServiceUuid201 => ({
  uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateEnvByServiceUuidResponseMock = (
  overrideResponse: Partial<UpdateEnvByServiceUuid201> = {},
): UpdateEnvByServiceUuid201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateEnvsByServiceUuidResponseMock = (
  overrideResponse: Partial<UpdateEnvsByServiceUuid201> = {},
): UpdateEnvsByServiceUuid201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteEnvByServiceUuidResponseMock = (
  overrideResponse: Partial<DeleteEnvByServiceUuid200> = {},
): DeleteEnvByServiceUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStartServiceByUuidResponseMock = (
  overrideResponse: Partial<StartServiceByUuid200> = {},
): StartServiceByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getStopServiceByUuidResponseMock = (
  overrideResponse: Partial<StopServiceByUuid200> = {},
): StopServiceByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRestartServiceByUuidResponseMock = (
  overrideResponse: Partial<RestartServiceByUuid200> = {},
): RestartServiceByUuid200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListServicesMockHandler = (
  overrideResponse?:
    | ServiceDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ServiceDTO[]> | ServiceDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListServicesResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateServiceMockHandler = (
  overrideResponse?:
    | CreateService201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateService201> | CreateService201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/services",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateServiceResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getGetServiceByUuidMockHandler = (
  overrideResponse?:
    | ServiceDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ServiceDTO> | ServiceDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeleteServiceByUuidMockHandler = (
  overrideResponse?:
    | DeleteServiceByUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteServiceByUuid200> | DeleteServiceByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/services/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getUpdateServiceByUuidMockHandler = (
  overrideResponse?:
    | UpdateServiceByUuid200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateServiceByUuid200> | UpdateServiceByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/services/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getListEnvsByServiceUuidMockHandler = (
  overrideResponse?:
    | EnvironmentVariableDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EnvironmentVariableDTO[]> | EnvironmentVariableDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListEnvsByServiceUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getCreateEnvByServiceUuidMockHandler = (
  overrideResponse?:
    | CreateEnvByServiceUuid201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateEnvByServiceUuid201> | CreateEnvByServiceUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/services/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateEnvByServiceUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getUpdateEnvByServiceUuidMockHandler = (
  overrideResponse?:
    | UpdateEnvByServiceUuid201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateEnvByServiceUuid201> | UpdateEnvByServiceUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/services/:uuid/envs",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateEnvByServiceUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getUpdateEnvsByServiceUuidMockHandler = (
  overrideResponse?:
    | UpdateEnvsByServiceUuid201
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UpdateEnvsByServiceUuid201> | UpdateEnvsByServiceUuid201),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/services/:uuid/envs/bulk",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateEnvsByServiceUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 201,
        },
      );
    },
    options,
  );
};

export const getDeleteEnvByServiceUuidMockHandler = (
  overrideResponse?:
    | DeleteEnvByServiceUuid200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteEnvByServiceUuid200> | DeleteEnvByServiceUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/services/:uuid/envs/:envUuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteEnvByServiceUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getStartServiceByUuidMockHandler = (
  overrideResponse?:
    | StartServiceByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StartServiceByUuid200> | StartServiceByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services/:uuid/start",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStartServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getStopServiceByUuidMockHandler = (
  overrideResponse?:
    | StopServiceByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StopServiceByUuid200> | StopServiceByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services/:uuid/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getStopServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getRestartServiceByUuidMockHandler = (
  overrideResponse?:
    | RestartServiceByUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RestartServiceByUuid200> | RestartServiceByUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/services/:uuid/restart",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRestartServiceByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getServicesMock = () => [
  getListServicesMockHandler(),
  getCreateServiceMockHandler(),
  getGetServiceByUuidMockHandler(),
  getDeleteServiceByUuidMockHandler(),
  getUpdateServiceByUuidMockHandler(),
  getListEnvsByServiceUuidMockHandler(),
  getCreateEnvByServiceUuidMockHandler(),
  getUpdateEnvByServiceUuidMockHandler(),
  getUpdateEnvsByServiceUuidMockHandler(),
  getDeleteEnvByServiceUuidMockHandler(),
  getStartServiceByUuidMockHandler(),
  getStopServiceByUuidMockHandler(),
  getRestartServiceByUuidMockHandler(),
];
