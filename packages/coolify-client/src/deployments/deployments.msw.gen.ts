/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  ApplicationDeploymentQueueDTO,
  ApplicationDTO,
  DeployByTagOrUuid200,
} from ".././model";

export const getListDeploymentsResponseMock =
  (): ApplicationDeploymentQueueDTO[] =>
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      application_id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      application_name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      commit: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      commit_message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      current_process_id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      deployment_url: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      deployment_uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      destination_id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      force_rebuild: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      git_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      is_api: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      is_webhook: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      logs: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      only_this_server: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      pull_request_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      restart_only: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      rollback: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      server_id: faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        undefined,
      ]),
      server_name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    }));

export const getGetDeploymentByUuidResponseMock = (
  overrideResponse: Partial<ApplicationDeploymentQueueDTO> = {},
): ApplicationDeploymentQueueDTO => ({
  application_id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  application_name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  commit: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  commit_message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  current_process_id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  deployment_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  deployment_uuid: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  destination_id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  force_rebuild: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  git_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  is_api: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_webhook: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  logs: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  only_this_server: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  pull_request_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  restart_only: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  rollback: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  server_id: faker.helpers.arrayElement([
    faker.number.int({ max: undefined, min: undefined }),
    undefined,
  ]),
  server_name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    faker.string.alpha({ length: { max: 20, min: 10 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeployByTagOrUuidResponseMock = (
  overrideResponse: Partial<DeployByTagOrUuid200> = {},
): DeployByTagOrUuid200 => ({
  deployments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ max: 10, min: 1 }) },
      (_, i) => i + 1,
    ).map(() => ({
      deployment_uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
      resource_uuid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListDeploymentsByAppUuidResponseMock = (): ApplicationDTO[] =>
  Array.from(
    { length: faker.number.int({ max: 10, min: 1 }) },
    (_, i) => i + 1,
  ).map(() => ({
    base_directory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    build_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    build_pack: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "nixpacks",
        "static",
        "dockerfile",
        "dockercompose",
      ] as const),
      undefined,
    ]),
    compose_parsing_version: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    config_hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    custom_docker_run_options: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_healthcheck_found: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    custom_labels: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_network_aliases: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    custom_nginx_configuration: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    deleted_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    destination_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    destination_type: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_custom_build_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_custom_start_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_domains: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_compose_location: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    docker_compose_raw: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_registry_image_name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    docker_registry_image_tag: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    dockerfile: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    dockerfile_location: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    dockerfile_target_build: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    environment_id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    fqdn: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    git_branch: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    git_commit_sha: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    git_full_url: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    git_repository: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    health_check_host: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_interval: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_method: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_path: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_port: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_response_text: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    health_check_retries: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_return_code: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_scheme: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    health_check_start_period: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    health_check_timeout: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    http_basic_auth_password: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    http_basic_auth_username: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    install_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    is_http_basic_auth_enabled: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    limits_cpu_shares: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    limits_cpus: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_cpuset: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    limits_memory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_reservation: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_swap: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    limits_memory_swappiness: faker.helpers.arrayElement([
      faker.number.int({ max: undefined, min: undefined }),
      undefined,
    ]),
    manual_webhook_secret_bitbucket: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_gitea: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_github: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    manual_webhook_secret_gitlab: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    ports_exposes: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    ports_mappings: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    post_deployment_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    post_deployment_command_container: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    pre_deployment_command: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    pre_deployment_command_container: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    preview_url_template: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    private_key_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    publish_directory: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    redirect: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.helpers.arrayElement(["www", "non-www", "both"] as const),
        null,
      ]),
      undefined,
    ]),
    repository_project_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    source_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    start_command: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    static_image: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    swarm_placement_constraints: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
    swarm_replicas: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ max: undefined, min: undefined }),
        null,
      ]),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    uuid: faker.helpers.arrayElement([
      faker.string.alpha({ length: { max: 20, min: 10 } }),
      undefined,
    ]),
    watch_paths: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { max: 20, min: 10 } }),
        null,
      ]),
      undefined,
    ]),
  }));

export const getListDeploymentsMockHandler = (
  overrideResponse?:
    | ApplicationDeploymentQueueDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ApplicationDeploymentQueueDTO[]>
        | ApplicationDeploymentQueueDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/deployments",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListDeploymentsResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getGetDeploymentByUuidMockHandler = (
  overrideResponse?:
    | ApplicationDeploymentQueueDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ApplicationDeploymentQueueDTO>
        | ApplicationDeploymentQueueDTO),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/deployments/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetDeploymentByUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getDeployByTagOrUuidMockHandler = (
  overrideResponse?:
    | DeployByTagOrUuid200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DeployByTagOrUuid200> | DeployByTagOrUuid200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/deploy",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeployByTagOrUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};

export const getListDeploymentsByAppUuidMockHandler = (
  overrideResponse?:
    | ApplicationDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ApplicationDTO[]> | ApplicationDTO[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/deployments/applications/:uuid",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListDeploymentsByAppUuidResponseMock(),
        ),
        {
          headers: { "Content-Type": "application/json" },
          status: 200,
        },
      );
    },
    options,
  );
};
export const getDeploymentsMock = () => [
  getListDeploymentsMockHandler(),
  getGetDeploymentByUuidMockHandler(),
  getDeployByTagOrUuidMockHandler(),
  getListDeploymentsByAppUuidMockHandler(),
];
