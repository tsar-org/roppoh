/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Coolify
 * OpenAPI spec version: 0.1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";

import type {
  ApplicationDeploymentQueueDTO,
  ApplicationDTO,
  DeployByTagOrUuid200,
  DeployByTagOrUuidParams,
  ListDeploymentsByAppUuidParams,
  NHttp400Response,
  NHttp401Response,
  NHttp404Response,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List currently running deployments
 * @summary List
 */
export type listDeploymentsResponse200 = {
  data: ApplicationDeploymentQueueDTO[];
  status: 200;
};

export type listDeploymentsResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listDeploymentsResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listDeploymentsResponseSuccess = listDeploymentsResponse200 & {
  headers: Headers;
};
export type listDeploymentsResponseError = (
  | listDeploymentsResponse400
  | listDeploymentsResponse401
) & {
  headers: Headers;
};

export type listDeploymentsResponse =
  | listDeploymentsResponseSuccess
  | listDeploymentsResponseError;

export const getListDeploymentsUrl = () => {
  return `/api/coolify/deployments`;
};

export const listDeployments = async (
  options?: RequestInit,
): Promise<listDeploymentsResponse> => {
  const res = await fetch(getListDeploymentsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listDeploymentsResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listDeploymentsResponse;
};

export const getListDeploymentsQueryKey = () => {
  return [`/api/coolify/deployments`] as const;
};

export const getListDeploymentsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listDeployments>>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof listDeployments>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListDeploymentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDeployments>>> = ({
    signal,
  }) => listDeployments({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listDeployments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeployments>>
>;
export type ListDeploymentsInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListDeploymentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeployments>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeployments>>,
          TError,
          Awaited<ReturnType<typeof listDeployments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeployments>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeployments>>,
          TError,
          Awaited<ReturnType<typeof listDeployments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeployments>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListDeploymentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeployments>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListDeploymentsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListDeploymentsInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListDeploymentsQueryOptions = <
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listDeployments>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListDeploymentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDeployments>>> = ({
    signal,
  }) => listDeployments({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listDeployments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeployments>>
>;
export type ListDeploymentsQueryError = NHttp400Response | NHttp401Response;

export function useListDeployments<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeployments>>,
          TError,
          Awaited<ReturnType<typeof listDeployments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeployments<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeployments>>,
          TError,
          Awaited<ReturnType<typeof listDeployments>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeployments<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListDeployments<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List
 */
export const prefetchListDeploymentsQuery = async <
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListDeploymentsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListDeploymentsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof listDeployments>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListDeploymentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDeployments>>> = ({
    signal,
  }) => listDeployments({ signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listDeployments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeployments>>
>;
export type ListDeploymentsSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListDeploymentsSuspense<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsSuspense<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsSuspense<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List
 */

export function useListDeploymentsSuspense<
  TData = Awaited<ReturnType<typeof listDeployments>>,
  TError = NHttp400Response | NHttp401Response,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeployments>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get deployment by UUID.
 * @summary Get
 */
export type getDeploymentByUuidResponse200 = {
  data: ApplicationDeploymentQueueDTO;
  status: 200;
};

export type getDeploymentByUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type getDeploymentByUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type getDeploymentByUuidResponse404 = {
  data: NHttp404Response;
  status: 404;
};

export type getDeploymentByUuidResponseSuccess =
  getDeploymentByUuidResponse200 & {
    headers: Headers;
  };
export type getDeploymentByUuidResponseError = (
  | getDeploymentByUuidResponse400
  | getDeploymentByUuidResponse401
  | getDeploymentByUuidResponse404
) & {
  headers: Headers;
};

export type getDeploymentByUuidResponse =
  | getDeploymentByUuidResponseSuccess
  | getDeploymentByUuidResponseError;

export const getGetDeploymentByUuidUrl = (uuid: string) => {
  return `/api/coolify/deployments/${uuid}`;
};

export const getDeploymentByUuid = async (
  uuid: string,
  options?: RequestInit,
): Promise<getDeploymentByUuidResponse> => {
  const res = await fetch(getGetDeploymentByUuidUrl(uuid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: getDeploymentByUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as getDeploymentByUuidResponse;
};

export const getGetDeploymentByUuidQueryKey = (uuid?: string) => {
  return [`/api/coolify/deployments/${uuid}`] as const;
};

export const getGetDeploymentByUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDeploymentByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDeploymentByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeploymentByUuid>>
  > = ({ signal }) => getDeploymentByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDeploymentByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDeploymentByUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeploymentByUuid>>
>;
export type GetDeploymentByUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetDeploymentByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeploymentByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeploymentByUuid>>,
          TError,
          Awaited<ReturnType<typeof getDeploymentByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeploymentByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeploymentByUuid>>,
          TError,
          Awaited<ReturnType<typeof getDeploymentByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeploymentByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetDeploymentByUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeploymentByUuid>>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDeploymentByUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetDeploymentByUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetDeploymentByUuidInfiniteQueryOptions(
    uuid,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetDeploymentByUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDeploymentByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeploymentByUuid>>
  > = ({ signal }) => getDeploymentByUuid(uuid, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeploymentByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDeploymentByUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeploymentByUuid>>
>;
export type GetDeploymentByUuidQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetDeploymentByUuid<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeploymentByUuid>>,
          TError,
          Awaited<ReturnType<typeof getDeploymentByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuid<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeploymentByUuid>>,
          TError,
          Awaited<ReturnType<typeof getDeploymentByUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuid<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetDeploymentByUuid<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDeploymentByUuidQueryOptions(uuid, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get
 */
export const prefetchGetDeploymentByUuidQuery = async <
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  queryClient: QueryClient,
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetDeploymentByUuidQueryOptions(uuid, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetDeploymentByUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDeploymentByUuidQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeploymentByUuid>>
  > = ({ signal }) => getDeploymentByUuid(uuid, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getDeploymentByUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDeploymentByUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeploymentByUuid>>
>;
export type GetDeploymentByUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response
  | NHttp404Response;

export function useGetDeploymentByUuidSuspense<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuidSuspense<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeploymentByUuidSuspense<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get
 */

export function useGetDeploymentByUuidSuspense<
  TData = Awaited<ReturnType<typeof getDeploymentByUuid>>,
  TError = NHttp400Response | NHttp401Response | NHttp404Response,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getDeploymentByUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDeploymentByUuidSuspenseQueryOptions(
    uuid,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Deploy by tag or uuid. `Post` request also accepted with `uuid` and `tag` json body.
 * @summary Deploy
 */
export type deployByTagOrUuidResponse200 = {
  data: DeployByTagOrUuid200;
  status: 200;
};

export type deployByTagOrUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type deployByTagOrUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type deployByTagOrUuidResponseSuccess = deployByTagOrUuidResponse200 & {
  headers: Headers;
};
export type deployByTagOrUuidResponseError = (
  | deployByTagOrUuidResponse400
  | deployByTagOrUuidResponse401
) & {
  headers: Headers;
};

export type deployByTagOrUuidResponse =
  | deployByTagOrUuidResponseSuccess
  | deployByTagOrUuidResponseError;

export const getDeployByTagOrUuidUrl = (params?: DeployByTagOrUuidParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/coolify/deploy?${stringifiedParams}`
    : `/api/coolify/deploy`;
};

export const deployByTagOrUuid = async (
  params?: DeployByTagOrUuidParams,
  options?: RequestInit,
): Promise<deployByTagOrUuidResponse> => {
  const res = await fetch(getDeployByTagOrUuidUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: deployByTagOrUuidResponse["data"] = body ? JSON.parse(body) : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as deployByTagOrUuidResponse;
};

export const getDeployByTagOrUuidQueryKey = (
  params?: DeployByTagOrUuidParams,
) => {
  return [`/api/coolify/deploy`, ...(params ? [params] : [])] as const;
};

export const getDeployByTagOrUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof deployByTagOrUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDeployByTagOrUuidQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof deployByTagOrUuid>>
  > = ({ signal }) => deployByTagOrUuid(params, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof deployByTagOrUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DeployByTagOrUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof deployByTagOrUuid>>
>;
export type DeployByTagOrUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useDeployByTagOrUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof deployByTagOrUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params: undefined | DeployByTagOrUuidParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deployByTagOrUuid>>,
          TError,
          Awaited<ReturnType<typeof deployByTagOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof deployByTagOrUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deployByTagOrUuid>>,
          TError,
          Awaited<ReturnType<typeof deployByTagOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof deployByTagOrUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Deploy
 */

export function useDeployByTagOrUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof deployByTagOrUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDeployByTagOrUuidInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Deploy
 */
export const prefetchDeployByTagOrUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getDeployByTagOrUuidInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getDeployByTagOrUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDeployByTagOrUuidQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof deployByTagOrUuid>>
  > = ({ signal }) => deployByTagOrUuid(params, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof deployByTagOrUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DeployByTagOrUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof deployByTagOrUuid>>
>;
export type DeployByTagOrUuidQueryError = NHttp400Response | NHttp401Response;

export function useDeployByTagOrUuid<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params: undefined | DeployByTagOrUuidParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof deployByTagOrUuid>>,
          TError,
          Awaited<ReturnType<typeof deployByTagOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuid<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof deployByTagOrUuid>>,
          TError,
          Awaited<ReturnType<typeof deployByTagOrUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuid<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Deploy
 */

export function useDeployByTagOrUuid<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDeployByTagOrUuidQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Deploy
 */
export const prefetchDeployByTagOrUuidQuery = async <
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getDeployByTagOrUuidQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getDeployByTagOrUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDeployByTagOrUuidQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof deployByTagOrUuid>>
  > = ({ signal }) => deployByTagOrUuid(params, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof deployByTagOrUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DeployByTagOrUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof deployByTagOrUuid>>
>;
export type DeployByTagOrUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useDeployByTagOrUuidSuspense<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params: undefined | DeployByTagOrUuidParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuidSuspense<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDeployByTagOrUuidSuspense<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Deploy
 */

export function useDeployByTagOrUuidSuspense<
  TData = Awaited<ReturnType<typeof deployByTagOrUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  params?: DeployByTagOrUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof deployByTagOrUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDeployByTagOrUuidSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List application deployments by using the app uuid
 * @summary List application deployments
 */
export type listDeploymentsByAppUuidResponse200 = {
  data: ApplicationDTO[];
  status: 200;
};

export type listDeploymentsByAppUuidResponse400 = {
  data: NHttp400Response;
  status: 400;
};

export type listDeploymentsByAppUuidResponse401 = {
  data: NHttp401Response;
  status: 401;
};

export type listDeploymentsByAppUuidResponseSuccess =
  listDeploymentsByAppUuidResponse200 & {
    headers: Headers;
  };
export type listDeploymentsByAppUuidResponseError = (
  | listDeploymentsByAppUuidResponse400
  | listDeploymentsByAppUuidResponse401
) & {
  headers: Headers;
};

export type listDeploymentsByAppUuidResponse =
  | listDeploymentsByAppUuidResponseSuccess
  | listDeploymentsByAppUuidResponseError;

export const getListDeploymentsByAppUuidUrl = (
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/coolify/deployments/applications/${uuid}?${stringifiedParams}`
    : `/api/coolify/deployments/applications/${uuid}`;
};

export const listDeploymentsByAppUuid = async (
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: RequestInit,
): Promise<listDeploymentsByAppUuidResponse> => {
  const res = await fetch(getListDeploymentsByAppUuidUrl(uuid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();

  const data: listDeploymentsByAppUuidResponse["data"] = body
    ? JSON.parse(body)
    : {};
  return {
    data,
    headers: res.headers,
    status: res.status,
  } as listDeploymentsByAppUuidResponse;
};

export const getListDeploymentsByAppUuidQueryKey = (
  uuid?: string,
  params?: ListDeploymentsByAppUuidParams,
) => {
  return [
    `/api/coolify/deployments/applications/${uuid}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getListDeploymentsByAppUuidInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listDeploymentsByAppUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListDeploymentsByAppUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
  > = ({ signal }) =>
    listDeploymentsByAppUuid(uuid, params, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsByAppUuidInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
>;
export type ListDeploymentsByAppUuidInfiniteQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListDeploymentsByAppUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeploymentsByAppUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params: undefined | ListDeploymentsByAppUuidParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
          TError,
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeploymentsByAppUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
          TError,
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeploymentsByAppUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List application deployments
 */

export function useListDeploymentsByAppUuidInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listDeploymentsByAppUuid>>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsByAppUuidInfiniteQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List application deployments
 */
export const prefetchListDeploymentsByAppUuidInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListDeploymentsByAppUuidInfiniteQueryOptions(
    uuid,
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getListDeploymentsByAppUuidQueryOptions = <
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListDeploymentsByAppUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
  > = ({ signal }) =>
    listDeploymentsByAppUuid(uuid, params, { signal, ...fetchOptions });

  return {
    enabled: !!uuid,
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsByAppUuidQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
>;
export type ListDeploymentsByAppUuidQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListDeploymentsByAppUuid<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params: undefined | ListDeploymentsByAppUuidParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
          TError,
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuid<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
          TError,
          Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuid<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List application deployments
 */

export function useListDeploymentsByAppUuid<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsByAppUuidQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List application deployments
 */
export const prefetchListDeploymentsByAppUuidQuery = async <
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  queryClient: QueryClient,
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getListDeploymentsByAppUuidQueryOptions(
    uuid,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getListDeploymentsByAppUuidSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListDeploymentsByAppUuidQueryKey(uuid, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
  > = ({ signal }) =>
    listDeploymentsByAppUuid(uuid, params, { signal, ...fetchOptions });

  return {
    queryFn,
    queryKey,
    staleTime: 10000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDeploymentsByAppUuidSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDeploymentsByAppUuid>>
>;
export type ListDeploymentsByAppUuidSuspenseQueryError =
  | NHttp400Response
  | NHttp401Response;

export function useListDeploymentsByAppUuidSuspense<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params: undefined | ListDeploymentsByAppUuidParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuidSuspense<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDeploymentsByAppUuidSuspense<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List application deployments
 */

export function useListDeploymentsByAppUuidSuspense<
  TData = Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
  TError = NHttp400Response | NHttp401Response,
>(
  uuid: string,
  params?: ListDeploymentsByAppUuidParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listDeploymentsByAppUuid>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDeploymentsByAppUuidSuspenseQueryOptions(
    uuid,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
