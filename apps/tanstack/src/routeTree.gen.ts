/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnitySportsResortIndexRouteImport } from './routes/unity-sports-resort/index'
import { Route as ServerIndexRouteImport } from './routes/server/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as IndexIndexRouteImport } from './routes/_index/index'
import { Route as ApiDokploySplatRouteImport } from './routes/api/dokploy.$'
import { Route as ApiCoolifySplatRouteImport } from './routes/api/coolify.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const UnitySportsResortIndexRoute = UnitySportsResortIndexRouteImport.update({
  id: '/unity-sports-resort/',
  path: '/unity-sports-resort/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerIndexRoute = ServerIndexRouteImport.update({
  id: '/server/',
  path: '/server/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexIndexRoute = IndexIndexRouteImport.update({
  id: '/_index/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDokploySplatRoute = ApiDokploySplatRouteImport.update({
  id: '/api/dokploy/$',
  path: '/api/dokploy/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCoolifySplatRoute = ApiCoolifySplatRouteImport.update({
  id: '/api/coolify/$',
  path: '/api/coolify/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexIndexRoute
  '/login': typeof LoginIndexRoute
  '/server': typeof ServerIndexRoute
  '/unity-sports-resort': typeof UnitySportsResortIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/coolify/$': typeof ApiCoolifySplatRoute
  '/api/dokploy/$': typeof ApiDokploySplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexIndexRoute
  '/login': typeof LoginIndexRoute
  '/server': typeof ServerIndexRoute
  '/unity-sports-resort': typeof UnitySportsResortIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/coolify/$': typeof ApiCoolifySplatRoute
  '/api/dokploy/$': typeof ApiDokploySplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_index/': typeof IndexIndexRoute
  '/login/': typeof LoginIndexRoute
  '/server/': typeof ServerIndexRoute
  '/unity-sports-resort/': typeof UnitySportsResortIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/coolify/$': typeof ApiCoolifySplatRoute
  '/api/dokploy/$': typeof ApiDokploySplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/server'
    | '/unity-sports-resort'
    | '/api/auth/$'
    | '/api/coolify/$'
    | '/api/dokploy/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/server'
    | '/unity-sports-resort'
    | '/api/auth/$'
    | '/api/coolify/$'
    | '/api/dokploy/$'
  id:
    | '__root__'
    | '/_index/'
    | '/login/'
    | '/server/'
    | '/unity-sports-resort/'
    | '/api/auth/$'
    | '/api/coolify/$'
    | '/api/dokploy/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexIndexRoute: typeof IndexIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ServerIndexRoute: typeof ServerIndexRoute
  UnitySportsResortIndexRoute: typeof UnitySportsResortIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiCoolifySplatRoute: typeof ApiCoolifySplatRoute
  ApiDokploySplatRoute: typeof ApiDokploySplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unity-sports-resort/': {
      id: '/unity-sports-resort/'
      path: '/unity-sports-resort'
      fullPath: '/unity-sports-resort'
      preLoaderRoute: typeof UnitySportsResortIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/server/': {
      id: '/server/'
      path: '/server'
      fullPath: '/server'
      preLoaderRoute: typeof ServerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_index/': {
      id: '/_index/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/dokploy/$': {
      id: '/api/dokploy/$'
      path: '/api/dokploy/$'
      fullPath: '/api/dokploy/$'
      preLoaderRoute: typeof ApiDokploySplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/coolify/$': {
      id: '/api/coolify/$'
      path: '/api/coolify/$'
      fullPath: '/api/coolify/$'
      preLoaderRoute: typeof ApiCoolifySplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexIndexRoute: IndexIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ServerIndexRoute: ServerIndexRoute,
  UnitySportsResortIndexRoute: UnitySportsResortIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiCoolifySplatRoute: ApiCoolifySplatRoute,
  ApiDokploySplatRoute: ApiDokploySplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
